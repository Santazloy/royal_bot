import logging

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import db
from config import is_user_admin
from constants.booking_const import groups_data
from handlers.booking.reporting import update_group_message, send_financial_report
from handlers.language import get_user_language, get_message

logger = logging.getLogger(__name__)
money_router = Router()


class MoneyStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_group_choice = State()
    waiting_for_operation = State()
    waiting_for_amount = State()


# –ï–¥–∏–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
MONEY_PHOTO = (
    "AgACAgUAAyEFAASVOrsCAAIDEGg23brrLiadZoeFJf_tyxhHjaDIAALjzDEbHWu4VZUmEXsg9M7tAQADAgADeQADNgQ"
)


async def _send_photo(
    entry: Message | CallbackQuery,
    caption: str,
    reply_markup: InlineKeyboardMarkup | None = None,
    parse_mode: str | None = None,
):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —É –∫–æ–≥–æ —É–¥–∞–ª—è—Ç—å –∏ –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
    if isinstance(entry, CallbackQuery):
        target = entry.message
        await entry.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
    else:
        target = entry

    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ
    try:
        await target.delete()
    except Exception:
        pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è answer_photo
    params: dict = {"photo": MONEY_PHOTO, "caption": caption}
    if reply_markup:
        params["reply_markup"] = reply_markup
    if parse_mode:
        params["parse_mode"] = parse_mode

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    await target.answer_photo(**params)


@money_router.message(Command("money"))
async def money_command(message: Message, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: /money"""
    await _money_init(message, state)


@money_router.callback_query(F.data == "money")
async def money_via_button(cb: CallbackQuery, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É ‚ÄúMoney‚Äù"""
    await _money_init(cb, state)


async def _money_init(entry: Message | CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 1: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ (salary –∏–ª–∏ cash).
    """
    user_id = entry.from_user.id
    lang = await get_user_language(user_id)

    if not is_user_admin(user_id):
        text = get_message(lang, "no_permission")
        if isinstance(entry, CallbackQuery):
            return await entry.answer(text, show_alert=True)
        return await entry.answer(text)

    btn_salary = get_message(lang, "btn_salary")
    btn_cash = get_message(lang, "btn_cash")
    btn_cancel = get_message(lang, "btn_cancel")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=btn_salary, callback_data="money_type_salary")],
        [InlineKeyboardButton(text=btn_cash, callback_data="money_type_cash")],
        [InlineKeyboardButton(text=btn_cancel, callback_data="money_cancel")],
    ])

    text = get_message(lang, "money_choose_type")
    await _send_photo(entry, text, reply_markup=kb)
    await state.set_state(MoneyStates.waiting_for_type)


@money_router.callback_query(
    F.data.startswith("money_type_"),
    StateFilter(MoneyStates.waiting_for_type),
)
async def process_money_type(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª salary –∏–ª–∏ cash.
    """
    lang = await get_user_language(cb.from_user.id)
    typ = cb.data.removeprefix("money_type_")
    if typ not in ("salary", "cash"):
        return await cb.answer(get_message(lang, "invalid_data"), show_alert=True)

    await state.update_data(type=typ)

    btn_cancel = get_message(lang, "btn_cancel")
    rows = [[InlineKeyboardButton(text=grp, callback_data=f"money_group_{grp}")]
            for grp in groups_data]
    rows.append([InlineKeyboardButton(text=btn_cancel, callback_data="money_cancel")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    text = get_message(lang, "money_choose_group")
    await _send_photo(cb, text, reply_markup=kb)
    await state.set_state(MoneyStates.waiting_for_group_choice)


@money_router.callback_query(
    F.data.startswith("money_group_"),
    StateFilter(MoneyStates.waiting_for_group_choice),
)
async def process_money_group(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É ‚áí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚ûï/‚ûñ.
    """
    lang = await get_user_language(cb.from_user.id)
    group = cb.data.removeprefix("money_group_")
    if group not in groups_data:
        return await cb.answer(get_message(lang, "no_such_group"), show_alert=True)

    await state.update_data(group=group)

    btn_cancel = get_message(lang, "btn_cancel")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï", callback_data="money_op_add")],
        [InlineKeyboardButton(text="‚ûñ", callback_data="money_op_sub")],
        [InlineKeyboardButton(text=btn_cancel, callback_data="money_cancel")],
    ])

    text = get_message(lang, "money_choose_op", group=group)
    await _send_photo(cb, text, reply_markup=kb)
    await state.set_state(MoneyStates.waiting_for_operation)


@money_router.callback_query(
    F.data.startswith("money_op_"),
    StateFilter(MoneyStates.waiting_for_operation),
)
async def process_money_op(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 4: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ç–æ + –∂–∏—Ä–Ω—ã–π emoji-–ø—Ä–µ—Ñ–∏–∫—Å.
    """
    lang = await get_user_language(cb.from_user.id)
    op = cb.data.removeprefix("money_op_")
    await state.update_data(operation=op)

    data = await state.get_data()
    group = data["group"]

    prompt = get_message(lang, "money_amount_prompt", group=group)
    if not prompt.strip():
        prompt = f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {'–¥–æ–±–∞–≤–ª–µ–Ω–∏—è' if op=='add' else '–≤—ã—á–∏—Ç–∞–Ω–∏—è'} –≤ –≥—Ä—É–ø–ø–µ {group}:"

    caption = f"<b>üí∞ {prompt}</b>"
    await _send_photo(cb, caption, parse_mode="HTML")
    await state.set_state(MoneyStates.waiting_for_amount)


@money_router.message(
    F.text,
    StateFilter(MoneyStates.waiting_for_amount),
)
async def process_money_amount(message: Message, state: FSMContext):
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î, in-memory, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º group-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç.
    """
    lang = await get_user_language(message.from_user.id)
    data = await state.get_data()
    group = data["group"]
    op = data["operation"]
    typ = data["type"]
    text_ = message.text.strip()

    if not text_.isdigit():
        return await message.answer(get_message(lang, "invalid_amount"))

    amount = int(text_)
    col = "salary" if typ == "salary" else "cash"
    current = groups_data[group].get(col, 0)
    new_val = current + (amount if op == "add" else -amount)

    if db.db_pool:
        async with db.db_pool.acquire() as conn:
            await conn.execute(
                f"UPDATE group_financial_data SET {col}=$1 WHERE group_key=$2",
                new_val, group
            )

    groups_data[group][col] = new_val

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º group-—Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_group_message(message.bot, group)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç
    await send_financial_report(message.bot)

    await state.clear()


@money_router.callback_query(F.data == "money_cancel")
async def money_cancel(cb: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞: —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state.
    """
    await state.clear()
    try:
        await cb.message.delete()
    except Exception:
        pass
    await cb.answer(get_message(await get_user_language(cb.from_user.id), "cancelled"))
