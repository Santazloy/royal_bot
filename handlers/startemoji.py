import logging
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import db  # –∑–¥–µ—Å—å db.db_pool –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID)
ADMIN_IDS = [7894353415, 7935161063, 1768520583]

# –ù–∞–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∂–∏
AVAILABLE_EMOJIS = [
    "üòé", "üíÉ", "üëª", "ü§ñ", "üëë", "ü¶Å", "‚ù§Ô∏è",
    "üí∞", "ü•á", "üçï", "ü¶ã", "üê∂", "üê±", "ü¶ä", "ü¶Ñ"
]

router = Router()

def is_user_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(Command("start"))
async def cmd_start(message: Message, bot: Bot):
    """
    /start ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —ç–º–æ–¥–∂–∏.
    –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∏ —à–ª—ë–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º.
    """
    user_id = message.from_user.id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ db_pool –Ω–µ None
    if not db.db_pool:
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (db_pool is None)!")
        return

    async with db.db_pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT emoji FROM user_emojis WHERE user_id=$1",
            user_id
        )
        if row is None:
            # –°–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
            await conn.execute(
                "INSERT INTO user_emojis (user_id, emoji) VALUES ($1, '')",
                user_id
            )
            emoji_val = ""
        else:
            emoji_val = row["emoji"] or ""

    if emoji_val:
        # –≠–º–æ–¥–∂–∏ —É–∂–µ –µ—Å—Ç—å
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç–º–æ–¥–∂–∏: {emoji_val}\n"
            "–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏!"
        )
    else:
        # –ù–µ—Ç —ç–º–æ–¥–∂–∏ ‚Äî —Å–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–æ–≤ –Ω–∞–∑–Ω–∞—á–∏—Ç—å
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ <b>–Ω–µ—Ç</b> —ç–º–æ–¥–∂–∏.\n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç –≤–∞–º —ç–º–æ–¥–∂–∏.\n\n"
            "–î–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–µ–ª—å–∑—è, –∫—Ä–æ–º–µ /start.",
            parse_mode="HTML"
        )
        await send_emoji_request_to_admins(user_id, bot)

async def send_emoji_request_to_admins(user_id: int, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç–º–æ–¥–∂–∏ –¥–ª—è XXX¬ª.
    """
    for admin_id in ADMIN_IDS:
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=f"–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç–º–æ–¥–∂–∏ –¥–ª—è {user_id}",
                callback_data=f"assign_emoji_{user_id}"
            )
        ]])

        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∂–¥—ë—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è —ç–º–æ–¥–∂–∏!",
                reply_markup=kb
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@router.callback_query(F.data.startswith("assign_emoji_"))
async def callback_assign_emoji(callback: CallbackQuery, bot: Bot):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç–º–æ–¥–∂–∏ –¥–ª—è {user_id}¬ª. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —ç–º–æ–¥–∂–∏.
    """
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!", show_alert=True)
        return

    parts = callback.data.split("_", 2)  # ["assign", "emoji", "123456789"]
    if len(parts) < 3:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!", show_alert=True)
        return

    user_id_str = parts[2]
    if not user_id_str.isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!", show_alert=True)
        return

    target_user_id = int(user_id_str)

    # –†–∞–∑–±–∏–≤–∞–µ–º —ç–º–æ–¥–∂–∏ –Ω–∞ —Ä—è–¥—ã –ø–æ 5
    row_size = 5
    inline_kb = []
    row_buf = []

    for i, emo in enumerate(AVAILABLE_EMOJIS, 1):
        cb = f"choose_emoji_{target_user_id}_{emo}"
        row_buf.append(InlineKeyboardButton(text=emo, callback_data=cb))
        if i % row_size == 0:
            inline_kb.append(row_buf)
            row_buf = []

    if row_buf:
        inline_kb.append(row_buf)

    kb = InlineKeyboardMarkup(inline_keyboard=inline_kb)

    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:",
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data.startswith("choose_emoji_"))
async def callback_choose_emoji(callback: CallbackQuery, bot: Bot):
    """
    –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–º–æ–¥–∂–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!", show_alert=True)
        return

    parts = callback.data.split("_", 2)  # ["choose", "emoji", "1234_üòé"]
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!", show_alert=True)
        return

    sub = parts[2].split("_", 1)
    if len(sub) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id_str, chosen_emoji = sub
    if not user_id_str.isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!", show_alert=True)
        return

    target_user_id = int(user_id_str)

    if not db.db_pool:
        await callback.answer("db_pool is None!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É user_emojis
    async with db.db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO user_emojis (user_id, emoji)
            VALUES ($1, $2)
            ON CONFLICT (user_id)
            DO UPDATE SET emoji=excluded.emoji
            """,
            target_user_id,
            chosen_emoji
        )

    await callback.message.edit_text(
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –ø—Ä–∏—Å–≤–æ–µ–Ω —ç–º–æ–¥–∂–∏: {chosen_emoji}"
    )
    await callback.answer("–≠–º–æ–¥–∂–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω!")

    # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            chat_id=target_user_id,
            text=(
                f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∂–∏: {chosen_emoji}.\n"
                f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
            )
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å user_id={target_user_id}: {e}")

@router.message(Command("emoji"))
async def cmd_emoji(message: Message, bot: Bot):
    """
    /emoji ‚Äî –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —ç–º–æ–¥–∂–∏ –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–ø–∏—Å–æ–∫ user_emojis).
    """
    if not is_user_admin(message.from_user.id):
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —ç–º–æ–¥–∂–∏.")
        return

    if not db.db_pool:
        await message.answer("db_pool == None, –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, emoji FROM user_emojis ORDER BY user_id")

    if not rows:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ user_emojis.")
        return

    # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    inline_kb = []
    for row in rows:
        uid = row["user_id"]
        emj = row["emoji"] or "‚Äî"
        text_btn = f"ID={uid} [{emj}]"
        cb_data = f"reassign_{uid}"
        inline_kb.append([InlineKeyboardButton(text=text_btn, callback_data=cb_data)])

    kb = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)

@router.callback_query(F.data.startswith("reassign_"))
async def callback_reassign_emoji(callback: CallbackQuery, bot: Bot):
    """
    –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —é–∑–µ—Ä–∞, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∂–∏.
    """
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!", show_alert=True)
        return

    user_str = callback.data.split("_", 1)[1]
    if not user_str.isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!", show_alert=True)
        return

    target_user_id = int(user_str)

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ AVAILABLE_EMOJIS
    row_size = 5
    inline_kb = []
    row_buf = []

    for i, emo in enumerate(AVAILABLE_EMOJIS, 1):
        cb = f"choose_emoji_{target_user_id}_{emo}"
        row_buf.append(InlineKeyboardButton(text=emo, callback_data=cb))
        if i % row_size == 0:
            inline_kb.append(row_buf)
            row_buf = []
    if row_buf:
        inline_kb.append(row_buf)

    kb = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:",
        reply_markup=kb
    )
    await callback.answer()