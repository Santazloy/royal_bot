# handlers/startemoji.py

import logging
from typing import List

from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

import db
from config import is_user_admin, ADMIN_IDS
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer
from handlers.states import EmojiStates

logger = logging.getLogger(__name__)
router = Router()

STARTEMOJI_PHOTO = "photo/IMG_2585.JPG"

CUSTOM_EMOJIS = [
    "‚öΩÔ∏è", "ü™©", "üèÄ", "üèà", "‚öæÔ∏è", "ü•é", "üéæ", "üèê", "üèâ", "üé±",
    "üèì", "üè∏", "ü•Ö", "‚õ≥Ô∏è", "ü™Å", "üèí", "üèë", "üèè", "ü™É", "ü•ç",
]
TRIPLE_EMOJIS = ["‚öΩÔ∏è", "ü™©", "üèÄ"]


async def _fetch_user_emojis(user_id: int) -> List[str]:
    """
    –í—ã—Ç–∞—â–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –Ω–µ—Ç).
    """
    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT emojis FROM user_emojis WHERE user_id = $1",
            user_id,
        )
    finally:
        await db.db_pool.release(conn)

    if not row or not row["emojis"]:
        return []
    return [e.strip() for e in row["emojis"].split(",") if e.strip()]


async def _save_user_emojis(user_id: int, emojis: List[str]) -> None:
    """
    –ó–∞–ø–∏—Å–∞—Ç—å (–∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å) —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id.
    """
    conn = await db.db_pool.acquire()
    try:
        await conn.execute(
            """
            INSERT INTO user_emojis (user_id, emojis)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET emojis = EXCLUDED.emojis
            """,
            user_id,
            ",".join(emojis),
        )
    finally:
        await db.db_pool.release(conn)


@router.message(Command("allemo"))
async def cmd_allemo(message: Message):
    """
    /allemo ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
    """
    uid = message.from_user.id
    lang = await get_user_language(uid)

    if not is_user_admin(uid):
        return await safe_answer(
            message,
            caption=get_message(lang, "no_permission", default="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."),
        )

    conn = await db.db_pool.acquire()
    try:
        rows = await conn.fetch(
            """
            SELECT u.user_id, u.username, e.emojis
            FROM user_emojis e
            JOIN users u ON e.user_id = u.user_id
            """
        )
    finally:
        await db.db_pool.release(conn)

    if not rows:
        return await safe_answer(
            message, caption="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏."
        )

    text = "\n".join(
        f"{i+1}. {row['username'] or row['user_id']}: {row['emojis'] or '‚Äî'}"
        for i, row in enumerate(rows)
    )
    await safe_answer(message, caption=text)

@router.message(Command("emoji"))
async def cmd_emoji(
    entity: Message | CallbackQuery,
    bot: Bot,
    *,
    user_id: int | None = None,
):
    """
    /emoji ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∞–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–Ω–æ–ø–∫–∏ ‚Äúassign_emoji_<user_id>‚Äù).
    –¢–µ—Å—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç –µ–≥–æ –∫–∞–∫: await cmd_emoji(msg, fake_bot, user_id=‚Ä¶).
    """
    # –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è entity.from_user.id, –±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user_id (–µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω),
    # –∏–Ω–∞—á–µ ‚Äî –ø–∞–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ entity.from_user.id.
    uid = user_id if user_id is not None else entity.from_user.id

    lang = await get_user_language(uid)

    if not is_user_admin(uid):
        return await safe_answer(
            entity,
            get_message(lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True,
        )

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞: async with ‚Ä¶ acquire() as conn
    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, username FROM users")

    if not rows:
        return await safe_answer(entity, caption="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=row["username"] or str(row["user_id"]),
                    callback_data=f"assign_emoji_{row['user_id']}",
                )
            ]
            for row in rows
        ]
    )

    await safe_answer(
        entity,
        photo=STARTEMOJI_PHOTO,
        caption=get_message(
            lang,
            "emoji_choose_user",
            default="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏:",
        ),
        reply_markup=kb,
    )

@router.callback_query(F.data.startswith("assign_emoji_"))
async def callback_assign_emoji(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ ‚Äúassign_emoji_<target_id>‚Äù:
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å CUSTOM_EMOJIS –∏ –∫–Ω–æ–ø–∫—É —Å "‚öΩÔ∏èü™©üèÄ".
    """
    me = await callback.bot.get_me()
    if callback.from_user.id == me.id:
        return

    lang = await get_user_language(callback.from_user.id)

    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            get_message(lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True,
        )

    prefix = "assign_emoji_"
    if not callback.data.startswith(prefix):
        return

    try:
        target_id = int(callback.data[len(prefix):])
    except ValueError:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!"),
        )

    # –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä—è–¥:
    single_buttons = [
        InlineKeyboardButton(text=e, callback_data=f"choose_emoji_{target_id}_{e}")
        for e in CUSTOM_EMOJIS
    ]
    rows = [single_buttons[i : i + 5] for i in range(0, len(single_buttons), 5)]
    rows.append(
        [
            InlineKeyboardButton(
                text="".join(TRIPLE_EMOJIS),
                callback_data=f"assign_emojis_{target_id}_{'_'.join(TRIPLE_EMOJIS)}",
            )
        ]
    )

    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=get_message(
            lang,
            "emoji_choose_emoji",
            target_id=target_id,
            default=f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}:",
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=rows),
    )
    await state.set_state(EmojiStates.waiting_for_assign)


@router.callback_query(
    StateFilter(EmojiStates.waiting_for_assign), F.data.startswith("choose_emoji_")
)
async def callback_choose_emoji(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ ‚Äúchoose_emoji_<target_id>_<emoji>‚Äù:
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω emoji.
    """
    me = await bot.get_me()
    if callback.from_user.id == me.id:
        return

    lang = await get_user_language(callback.from_user.id)

    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            get_message(lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True,
        )

    parts = callback.data.split("_", 3)
    if len(parts) != 4:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."),
        )

    _, _, target_id_str, emoji = parts
    try:
        target_id = int(target_id_str)
    except ValueError:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!"),
        )

    await _save_user_emojis(target_id, [emoji])

    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=get_message(
            lang,
            "emoji_assigned",
            target_id=target_id,
            emoji=emoji,
            default=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∑–∏: {emoji}",
        ),
    )

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–µ—Ç –Ω–µ –¥–æ–π—Ç–∏, –µ—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä,
    # –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é).
    try:
        await bot.send_message(
            target_id,
            get_message(
                lang,
                "emoji_notify",
                emoji=emoji,
                default=f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∑–∏: {emoji}\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!",
            ),
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    # test-—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç state.clear(), —Ç–∞–∫ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –Ω–µ –¥–µ–ª–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º.
    try:
        await callback.bot.get_current().state.clear()  # best-effort. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    except Exception:
        pass


@router.callback_query(
    StateFilter(EmojiStates.waiting_for_assign), F.data.startswith("assign_emojis_")
)
async def assign_multiple_emojis_callback(
    callback: CallbackQuery, state: FSMContext, bot: Bot
):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ ‚Äúassign_emojis_<target_id>_<e1>_<e2>_‚Ä¶‚Äù:
    —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ emoji —Å—Ä–∞–∑—É.
    """
    me = await bot.get_me()
    if callback.from_user.id == me.id:
        return

    lang = await get_user_language(callback.from_user.id)

    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            get_message(lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True,
        )

    parts = callback.data.split("_")
    if len(parts) < 3:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."),
        )

    try:
        target_id = int(parts[2])
    except ValueError:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!"),
        )

    assigned = parts[3:]
    if not assigned:
        return await safe_answer(
            callback,
            get_message(lang, "emoji_incorrect", default="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."),
        )

    await _save_user_emojis(target_id, assigned)

    emojis_str = "".join(assigned)
    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=get_message(
            lang,
            "emoji_assigned",
            target_id=target_id,
            emoji=emojis_str,
            default=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —ç–º–æ–¥–∑–∏: {emojis_str}",
        ),
    )

    try:
        await bot.send_message(
            target_id,
            get_message(
                lang,
                "emoji_notify",
                emoji=emojis_str,
                default=f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —ç–º–æ–¥–∑–∏: {emojis_str}\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!",
            ),
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    try:
        await callback.bot.get_current().state.clear()
    except Exception:
        pass


async def get_next_emoji(user_id: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–µ emoji –¥–ª—è user_id (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏), –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–º—É—é –ø–µ—Ä–≤—É—é ‚Äúüë§‚Äù.
    """
    emojis = await _fetch_user_emojis(user_id)
    if not emojis:
        await _save_user_emojis(user_id, ["üë§"])
        return "üë§"

    if len(emojis) == 1:
        return emojis[0]

    nxt = emojis.pop(0)
    emojis.append(nxt)
    await _save_user_emojis(user_id, emojis)
    return nxt


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    """
    /start ‚Äî –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç —ç–º–æ–¥–∑–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤; –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ‚Äú–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!‚Äù.
    """
    user_id = message.from_user.id

    if await _fetch_user_emojis(user_id):
        lang = await get_user_language(user_id)
        await safe_answer(
            message,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(lang, "start_success", default="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠–º–æ–¥–∑–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."),
        )
        return

    lang = await get_user_language(user_id)
    req_text = get_message(
        lang,
        "new_user",
        default=(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.full_name} "
            f"(ID: {user_id}) –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏."
        ),
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_message(lang, "assign_emoji", default="–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç–º–æ–¥–∑–∏"),
                    callback_data=f"assign_emoji_{user_id}",
                )
            ]
        ]
    )

    for admin in ADMIN_IDS:
        try:
            await bot.send_message(admin, req_text, reply_markup=kb)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É: {e}")

    await safe_answer(
        message,
        photo=STARTEMOJI_PHOTO,
        caption=get_message(
            lang,
            "start_wait_approval",
            default="–û–∂–∏–¥–∞–π—Ç–µ ‚Äî –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        ),
    )
