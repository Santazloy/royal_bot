# handlers/startemoji.py

import logging
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import db
from config import is_user_admin
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer  # –µ–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ + —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

logger = logging.getLogger(__name__)
router = Router()

# –í—ã–Ω–µ—Å—ë–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–µ–∑–¥–µ
STARTEMOJI_PHOTO = "AgACAgUAAyEFAASVOrsCAAIDEGg23brrLiadZoeFJf_tyxhHjaDIAALjzDEbHWu4VZUmEXsg9M7tAQADAgADeQADNgQ"

class EmojiStates(StatesGroup):
    waiting_for_emoji = State()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–º–æ–¥–∑–∏
AVAILABLE_EMOJIS = [
    "üòÄ","üòÉ","üòÑ","üòÅ","üòÜ","üòÖ","üòÇ","ü§£","üòä","üòá",
    "üòâ","üòå","üòç","ü•∞","üòò","üòó","üòô","üòö","üòã","üòõ",
    "üòù","üòú","ü§™","ü§®","üßê","ü§ì","üòé","ü•≥","üòè","üò∂",
    # ‚Ä¶ –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

@router.message(Command("emoji"))
async def cmd_emoji(message: Message, bot: Bot, user_id: int = None):
    """
    –ê–¥–º–∏–Ω –≤—ã–∑—ã–≤–∞–µ—Ç /emoji ‚Äî –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = user_id or message.from_user.id
    lang = await get_user_language(user_id)

    if not is_user_admin(user_id):
        return await safe_answer(
            message,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(lang, "admin_only"),
            show_alert=True
        )
    if not db.db_pool:
        return await safe_answer(
            message,
            photo=STARTEMOJI_PHOTO,
            caption="DB pool not initialized!"
        )

    # –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —ç–º–æ–¥–∑–∏
    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, emoji FROM user_emojis ORDER BY user_id")

    if not rows:
        return await safe_answer(
            message,
            photo=STARTEMOJI_PHOTO,
            caption="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∂–∏."
        )

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"ID={r['user_id']} [{r['emoji'] or '‚Äî'}]",
                callback_data=f"reassign_{r['user_id']}"
            )
        ]
        for r in rows
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ñ–æ—Ç–æ
    await safe_answer(
        message,
        photo=STARTEMOJI_PHOTO,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=kb
    )

@router.callback_query(F.data == "emoji")
async def emoji_via_button(cb: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –¢–æ—Ç –∂–µ —Å–∞–º—ã–π /emoji, –Ω–æ –≤—ã–∑–≤–∞–Ω –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∫–Ω–æ–ø–∫–æ–π.
    """
    await cmd_emoji(cb.message, bot, user_id=cb.from_user.id)
    await cb.answer()

@router.callback_query(F.data.startswith("reassign_"))
async def callback_assign_emoji(callback: CallbackQuery, state: FSMContext):
    """
    –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ ID=user ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–º–æ–¥–∑–∏.
    """
    lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(lang, "admin_only"),
            show_alert=True
        )

    user_id_str = callback.data.removeprefix("reassign_")
    if not user_id_str.isdigit():
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!",
            show_alert=True
        )
    target_id = int(user_id_str)

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 5√ó?
    buttons = []
    row = []
    for i, emo in enumerate(AVAILABLE_EMOJIS, start=1):
        row.append(
            InlineKeyboardButton(
                text=emo,
                callback_data=f"choose_emoji_{target_id}_{emo}"
            )
        )
        if i % 5 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("choose_emoji_"))
async def callback_choose_emoji(callback: CallbackQuery, bot: Bot):
    """
    –ê–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —ç–º–æ–¥–∂–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º.
    """
    lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(lang, "admin_only"),
            show_alert=True
        )

    parts = callback.data.removeprefix("choose_emoji_")
    if "_" not in parts:
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption="–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            show_alert=True
        )
    uid_str, emo = parts.split("_", 1)
    if not uid_str.isdigit():
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id!",
            show_alert=True
        )
    target_id = int(uid_str)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
    async with db.db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO user_emojis (user_id, emoji) VALUES ($1, $2) "
            "ON CONFLICT (user_id) DO UPDATE SET emoji = EXCLUDED.emoji",
            target_id, emo
        )

    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –ø—Ä–∏—Å–≤–æ–µ–Ω —ç–º–æ–¥–∂–∏: {emo}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await bot.send_message(
            target_id,
            f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∂–∏: {emo}\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
        )
    except:
        pass

    await callback.answer()
