# handlers/startemoji.py

import logging
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import db
from config import is_user_admin, ADMIN_IDS
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer

logger = logging.getLogger(__name__)
router = Router()

STARTEMOJI_PHOTO = "photo/IMG_2585.JPG"

CUSTOM_EMOJIS = [
    "‚öΩÔ∏è", "ü™©", "üèÄ", "üèà", "‚öæÔ∏è", "ü•é", "üéæ", "üèê", "üèâ", "üé±",
    "üèì", "üè∏", "ü•Ö", "‚õ≥Ô∏è", "ü™Å", "üèí", "üèë", "üèè", "ü™É", "ü•ç",
    # ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ —Å–≤–æ–µ–º—É —Å–ø–∏—Å–∫—É ...
]

TRIPLE_EMOJIS = ["‚öΩÔ∏è", "ü™©", "üèÄ"]  # –∏–∑–º–µ–Ω—è–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

class EmojiStates(StatesGroup):
    waiting_for_assign = State()

@router.message(Command("allemo"))
async def cmd_allemo(message: Message):
    user_id = message.from_user.id
    user_lang = await get_user_language(user_id)

    if not is_user_admin(user_id):
        return await safe_answer(
            message,
            get_message(user_lang, 'no_permission', default="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        )

    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT u.user_id, u.username, e.emoji 
            FROM user_emojis e 
            JOIN users u ON e.user_id = u.user_id
        """)
    if not rows:
        return await safe_answer(message, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏.")

    text = "\n".join([
        f"{i+1}. {row['username'] or row['user_id']}: {row['emoji'] or '‚Äî'}"
        for i, row in enumerate(rows)
    ])
    await safe_answer(message, text)

@router.message(Command("emoji"))
async def cmd_emoji(message: Message, bot: Bot):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    if not is_user_admin(user_id):
        return await safe_answer(
            message,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )

    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, username FROM users")
    if not rows:
        return await safe_answer(message, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{row['username'] or row['user_id']}",
                callback_data=f"assign_emoji_{row['user_id']}"
            )] for row in rows
        ]
    )
    await safe_answer(
        message,
        photo=STARTEMOJI_PHOTO,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏:",
        reply_markup=kb
    )

@router.callback_query(F.data.startswith("assign_emoji_"))
async def assign_emoji_callback(callback: CallbackQuery, state: FSMContext):
    user_lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(user_lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )

    user_id = int(callback.data.removeprefix("assign_emoji_"))
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    single_buttons = [
        InlineKeyboardButton(
            text=emoji,
            callback_data=f"choose_emoji_{user_id}_{emoji}"
        ) for emoji in CUSTOM_EMOJIS
    ]
    keyboard_rows = [single_buttons[i:i+5] for i in range(0, len(single_buttons), 5)]

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
    triple_emojis_str = "".join(TRIPLE_EMOJIS)
    triple_btn = InlineKeyboardButton(
        text=triple_emojis_str,
        callback_data=f"assign_emojis_{user_id}_" + "_".join(TRIPLE_EMOJIS)
    )
    keyboard_rows.append([triple_btn])

    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=f"–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ (–∏–ª–∏ —Ç—Ä–æ–π–∫—É) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    )
    await state.set_state(EmojiStates.waiting_for_assign)

@router.callback_query(F.data.startswith("choose_emoji_"), EmojiStates.waiting_for_assign)
async def choose_emoji_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(user_lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )
    parts = callback.data.split("_")
    target_id = int(parts[2])
    emoji = parts[3]
    async with db.db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO user_emojis (user_id, emoji) VALUES ($1, $2) "
            "ON CONFLICT (user_id) DO UPDATE SET emoji = $2",
            target_id, emoji
        )
    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∑–∏: {emoji}"
    )
    try:
        await bot.send_message(
            target_id,
            f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —ç–º–æ–¥–∑–∏: {emoji}\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    await state.clear()

@router.callback_query(F.data.startswith("assign_emojis_"), EmojiStates.waiting_for_assign)
async def assign_multiple_emojis_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        return await safe_answer(
            callback,
            photo=STARTEMOJI_PHOTO,
            caption=get_message(user_lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )
    parts = callback.data.split("_")
    target_id = int(parts[2])
    assigned_emojis = parts[3:]
    emojis_str = ",".join(assigned_emojis)
    async with db.db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO user_emojis (user_id, emoji) VALUES ($1, $2) "
            "ON CONFLICT (user_id) DO UPDATE SET emoji = $2",
            target_id, emojis_str
        )
    await safe_answer(
        callback,
        photo=STARTEMOJI_PHOTO,
        caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —ç–º–æ–¥–∑–∏: {''.join(assigned_emojis)}"
    )
    try:
        await bot.send_message(
            target_id,
            f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —ç–º–æ–¥–∑–∏: {''.join(assigned_emojis)}\n–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    await state.clear()

async def get_next_emoji(user_id: int) -> str:
    async with db.db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT emoji FROM user_emojis WHERE user_id=$1", user_id)
    if row and row["emoji"]:
        emojis = row["emoji"].split(",")
        if len(emojis) > 1:
            next_emoji = emojis.pop(0)
            emojis.append(next_emoji)
            new_str = ",".join(emojis)
            async with db.db_pool.acquire() as conn:
                await conn.execute(
                    "UPDATE user_emojis SET emoji=$1 WHERE user_id=$2",
                    new_str, user_id
                )
            return next_emoji
        else:
            return emojis[0]
    return "‚ùì"

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or f"{message.from_user.first_name} {message.from_user.last_name}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–æ–¥–∑–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.db_pool.acquire() as conn:
        row = await conn.fetchrow("SELECT emoji FROM user_emojis WHERE user_id=$1", user_id)
    if row and row["emoji"]:
        lang = await get_user_language(user_id)
        return await safe_answer(
            message,
            get_message(lang, 'start_success', default='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠–º–æ–¥–∑–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.')
        )

    # –≠–º–æ–¥–∑–∏ –µ—â—ë –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º
    lang = await get_user_language(user_id)
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user_id}) –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏."
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å —ç–º–æ–¥–∑–∏", callback_data=f"assign_emoji_{user_id}")]
    ])
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                text,
                reply_markup=kb
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É: {e}")

    await safe_answer(
        message,
        get_message(lang, 'start_wait_approval', default='–û–∂–∏–¥–∞–π—Ç–µ ‚Äî –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
    )
