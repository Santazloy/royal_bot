# handlers/next.py

import asyncio
import datetime
import logging
import html
from typing import Dict
from zoneinfo import ZoneInfo

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums.parse_mode import ParseMode

import db
from config import is_user_admin, FINANCIAL_REPORT_GROUP_ID
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer
from constants.booking_const import groups_data
from handlers.booking.reporting import update_group_message

from constants.salary import salary_options

logger = logging.getLogger(__name__)
router = Router()


async def do_next_core(bot):
    """
    1) –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç –∑–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ FINANCIAL_REPORT_GROUP_ID.
    2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
    3) –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª.
    4) –û—á–∏—â–∞–µ–º in-memory –¥–ª—è ¬´–°–µ–≥–æ–¥–Ω—è¬ª.
    5) –ü–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ó–∞–≤—Ç—Ä–∞¬ª‚Üí¬´–°–µ–≥–æ–¥–Ω—è¬ª.
    6) –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    async with db.db_pool.acquire() as conn:
        today_bookings = await conn.fetch("SELECT * FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        total_bookings_today = len(today_bookings)

        cash_count = cash_sum = 0
        beznal_count = beznal_sum = 0
        agent_count = agent_sum = 0

        user_bookings_count: Dict[int, int] = {}
        group_reports = {gk: {"salary_sum": 0, "cash_sum": 0} for gk in groups_data.keys()}

        for b in today_bookings:
            pm = b["payment_method"]
            amt = b["amount"] or 0
            uid = b["user_id"]
            gk = b["group_key"]
            status = b.get("status") or ""

            user_bookings_count[uid] = user_bookings_count.get(uid, 0) + 1
            opt = groups_data.get(gk, {}).get("salary_option", 1)
            base_salary = salary_options.get(opt, {}).get(status, 0)
            group_reports[gk]["salary_sum"] += base_salary

            if pm == "cash":
                cash_count += 1
                cash_sum += amt
                group_reports[gk]["cash_sum"] += amt
            elif pm == "beznal":
                beznal_count += 1
                beznal_sum += amt
            elif pm == "agent":
                agent_count += 1
                agent_sum += amt

        user_lines = []
        for uid, cnt in user_bookings_count.items():
            row = await conn.fetchrow("SELECT username FROM users WHERE user_id = $1", uid)
            uname = row["username"] if (row and row["username"]) else f"User {uid}"
            user_lines.append(f"({html.escape(uname)}) {cnt}")
        user_report = "\n".join(user_lines) if user_lines else "–Ω–µ—Ç"

        report_lines = [
            "üóÇÔ∏è <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b> üóÇÔ∏è\n",
            f"‚è∞ –ë—Ä–æ–Ω–∏: {total_bookings_today}\n",
            f"üíµ –ù–∞–ª: {cash_count}  –∏—Ç–æ–≥: {cash_sum}¬•\n",
            f"üí∏ –ë–µ–∑–Ω–∞–ª: {beznal_count}  –∏—Ç–æ–≥: {beznal_sum}¬•\n",
            f"üßÆ –ê–≥–µ–Ω—Ç: {agent_count}  –∏—Ç–æ–≥: {agent_sum}¬•\n",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            user_report,
        ]
        report_text = "\n".join(report_lines)
        try:
            await bot.send_message(FINANCIAL_REPORT_GROUP_ID, report_text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω. –æ—Ç—á–µ—Ç: %s", e)

        for gk, data in group_reports.items():
            ginfo = groups_data.get(gk)
            if not ginfo:
                continue
            chat_id = ginfo["chat_id"]
            salary_sum = data["salary_sum"]
            cash_sum_grp = data["cash_sum"]
            grp_lines = [
                f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ {html.escape(gk)} –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>",
                f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –¥–µ–Ω—å: {salary_sum}¬•",
                f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ –∑–∞ –¥–µ–Ω—å: {cash_sum_grp}¬•",
            ]
            grp_text = "\n".join(grp_lines)
            try:
                await bot.send_message(chat_id, grp_text, parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≥—Ä—É–ø–ø–µ %s: %s", gk, e)

        await conn.execute("DELETE FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        await conn.execute("DELETE FROM group_time_slot_statuses WHERE day = '–°–µ–≥–æ–¥–Ω—è'")

    for gk, ginfo in groups_data.items():
        ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = []
        ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = set()
        ginfo["time_slot_statuses"] = {
            (d, ts): st for ((d, ts), st) in ginfo["time_slot_statuses"].items() if d != "–°–µ–≥–æ–¥–Ω—è"
        }
        ginfo["slot_bookers"] = {
            (d, ts): u for ((d, ts), u) in ginfo["slot_bookers"].items() if d != "–°–µ–≥–æ–¥–Ω—è"
        }

    async with db.db_pool.acquire() as conn:
        await conn.execute("UPDATE bookings SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")
        await conn.execute("UPDATE group_time_slot_statuses SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")

    for gk, ginfo in groups_data.items():
        ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["booked_slots"].get("–ó–∞–≤—Ç—Ä–∞", [])
        ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["unavailable_slots"].get("–ó–∞–≤—Ç—Ä–∞", set())
        ginfo["booked_slots"]["–ó–∞–≤—Ç—Ä–∞"] = []
        ginfo["unavailable_slots"]["–ó–∞–≤—Ç—Ä–∞"] = set()

        new_tss = {}
        for (d, ts), st in ginfo["time_slot_statuses"].items():
            new_tss[("–°–µ–≥–æ–¥–Ω—è" if d == "–ó–∞–≤—Ç—Ä–∞" else d, ts)] = st
        ginfo["time_slot_statuses"] = new_tss

        new_sb = {}
        for (d, ts), u in ginfo["slot_bookers"].items():
            new_sb[("–°–µ–≥–æ–¥–Ω—è" if d == "–ó–∞–≤—Ç—Ä–∞" else d, ts)] = u
        ginfo["slot_bookers"] = new_sb

    for gk in groups_data.keys():
        try:
            await update_group_message(bot, gk)
        except Exception as e:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã %s: %s", gk, e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –¥–Ω—è ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@router.callback_query(F.data == "reset_day")
async def prompt_reset_day(callback: CallbackQuery):
    user_id = callback.from_user.id
    me = await callback.bot.get_me()
    if user_id == me.id:
        return
    if not is_user_admin(user_id):
        return await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

    lang = await get_user_language(user_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=get_message(lang, "confirm_yes", default="–î–∞"), callback_data="confirm_reset_day")],
        [InlineKeyboardButton(text=get_message(lang, "confirm_no",  default="–ù–µ—Ç"), callback_data="cancel_reset_day")],
    ])
    await safe_answer(
        callback,
        get_message(lang, "reset_confirm_prompt", default="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–µ–Ω—å?"),
        reply_markup=kb
    )


@router.callback_query(F.data == "confirm_reset_day")
async def handle_confirm_reset(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not is_user_admin(user_id):
        return await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
    await do_next_core(callback.bot)
    lang = await get_user_language(user_id)
    await callback.answer(get_message(lang, "next_done", default="‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã."), show_alert=True)


@router.callback_query(F.data == "cancel_reset_day")
async def handle_cancel_reset(callback: CallbackQuery):
    user_id = callback.from_user.id
    if not is_user_admin(user_id):
        return await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
    lang = await get_user_language(user_id)
    await callback.answer(get_message(lang, "reset_cancelled", default="‚ùå –°–±—Ä–æ—Å –¥–Ω—è –æ—Ç–º–µ–Ω–µ–Ω."), show_alert=True)


def register_daily_scheduler(dp, bot):
    async def _scheduler():
        while True:
            try:
                now = datetime.datetime.now(ZoneInfo("Asia/Shanghai"))
                if now.hour == 3 and now.minute == 0:
                    logger.info("–ê–≤—Ç–æ‚Äê—Å–±—Ä–æ—Å 03:00 Asia/Shanghai")
                    await do_next_core(bot)
                    await asyncio.sleep(61)
                else:
                    await asyncio.sleep(60)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: %s", e)
                await asyncio.sleep(60)

    async def _on_startup():
        asyncio.create_task(_scheduler())

    dp.startup.register(_on_startup)
