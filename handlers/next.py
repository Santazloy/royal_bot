import asyncio
import datetime
import logging
from typing import Dict

from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command

import db
from config import is_user_admin, FINANCIAL_REPORT_GROUP_ID
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer
from constants.booking_const import groups_data
from handlers.booking.reporting import update_group_message

from zoneinfo import ZoneInfo

logger = logging.getLogger(__name__)
router = Router()


async def do_next_core(bot):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤:
    1) –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç –∑–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ FINANCIAL_REPORT_GROUP_ID.
    2) –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ "–°–µ–≥–æ–¥–Ω—è" –∏–∑ —Ç–∞–±–ª–∏—Ü bookings –∏ group_time_slot_statuses.
    3) –û—á–∏—â–∞–µ–º in‚Äêmemory –¥–ª—è ¬´–°–µ–≥–æ–¥–Ω—è¬ª.
    4) –ü–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ó–∞–≤—Ç—Ä–∞¬ª‚Üí¬´–°–µ–≥–æ–¥–Ω—è¬ª –≤ –ë–î –∏ in‚Äêmemory.
    5) –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
    """
    async with db.db_pool.acquire() as conn:
        # 1) –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        today_bookings = await conn.fetch("SELECT * FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        total_bookings_today = len(today_bookings)

        cash_count = cash_sum = 0
        beznal_count = beznal_sum = 0
        agent_count = agent_sum = 0

        user_bookings_count: Dict[int, int] = {}

        for b in today_bookings:
            pm = b["payment_method"]
            amt = b["amount"] or 0
            uid = b["user_id"]

            user_bookings_count[uid] = user_bookings_count.get(uid, 0) + 1

            if pm == "cash":
                cash_count += 1
                cash_sum += amt
            elif pm == "beznal":
                beznal_count += 1
                beznal_sum += amt
            elif pm == "agent":
                agent_count += 1
                agent_sum += amt

        # 2) –°–±–æ—Ä –æ—Ç—á—ë—Ç–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_lines = []
        for uid, cnt in user_bookings_count.items():
            row_user = await conn.fetchrow(
                "SELECT username FROM users WHERE user_id = $1",
                uid
            )
            uname = row_user["username"] if (row_user and row_user["username"]) else f"User {uid}"
            user_lines.append(f"({uname}) {cnt}")
        user_report = "\n".join(user_lines) if user_lines else "–Ω–µ—Ç"

        # 3) –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        report_lines = [
            "üóÇÔ∏è <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–µ–π do_next_core)</b> üóÇÔ∏è\n",
            f"‚è∞ –ë—Ä–æ–Ω–∏: {total_bookings_today}\n",
            f"üíµ –ù–∞–ª: {cash_count}  –∏—Ç–æ–≥: {cash_sum}¬•\n",
            f"üí∏ –ë–µ–∑–Ω–∞–ª: {beznal_count}  –∏—Ç–æ–≥: {beznal_sum}¬•\n",
            f"üßÆ –ê–≥–µ–Ω—Ç: {agent_count}  –∏—Ç–æ–≥: {agent_sum}¬•\n",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            user_report,
        ]
        report_text = "\n".join(report_lines)

        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≥—Ä—É–ø–ø—É
        try:
            await bot.send_message(
                FINANCIAL_REPORT_GROUP_ID,
                report_text,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É: %s", e)

        # 5) –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        await conn.execute("DELETE FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        await conn.execute("DELETE FROM group_time_slot_statuses WHERE day = '–°–µ–≥–æ–¥–Ω—è'")

        # 6) –û—á–∏—â–∞–µ–º in‚Äêmemory —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        for gk, ginfo in groups_data.items():
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = []
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = set()
            ginfo["time_slot_statuses"] = {
                (d, ts): st
                for ((d, ts), st) in ginfo["time_slot_statuses"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }
            ginfo["slot_bookers"] = {
                (d, ts): u
                for ((d, ts), u) in ginfo["slot_bookers"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }

        # 7) –ü–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª –≤ –ë–î
        await conn.execute("UPDATE bookings SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")
        await conn.execute("UPDATE group_time_slot_statuses SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")

        # 8) –û–±–Ω–æ–≤–ª—è–µ–º in‚Äêmemory —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        for gk, ginfo in groups_data.items():
            # –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å–ø–∏—Å–∫–∏ ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["booked_slots"].get("–ó–∞–≤—Ç—Ä–∞", [])
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["unavailable_slots"].get("–ó–∞–≤—Ç—Ä–∞", set())
            ginfo["booked_slots"]["–ó–∞–≤—Ç—Ä–∞"] = []
            ginfo["unavailable_slots"]["–ó–∞–≤—Ç—Ä–∞"] = set()

            # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            new_tss = {}
            for (d, ts), st in ginfo["time_slot_statuses"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_tss[("–°–µ–≥–æ–¥–Ω—è", ts)] = st
                else:
                    new_tss[(d, ts)] = st
            ginfo["time_slot_statuses"] = new_tss

            new_sb = {}
            for (d, ts), u in ginfo["slot_bookers"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_sb[("–°–µ–≥–æ–¥–Ω—è", ts)] = u
                else:
                    new_sb[(d, ts)] = u
            ginfo["slot_bookers"] = new_sb

        # 9) –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        for gk in groups_data.keys():
            try:
                await update_group_message(bot, gk)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s: %s", gk, e)


@router.message(Command("next"))
async def cmd_next(message: Message, state: FSMContext):
    """
    –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ /next ‚Äì –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç ¬´–ó–∞–≤—Ç—Ä–∞¬ª‚Üí¬´–°–µ–≥–æ–¥–Ω—è¬ª.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    user_id = message.from_user.id
    user_lang = await get_user_language(user_id)

    if not is_user_admin(user_id):
        await message.reply(get_message(user_lang, "no_permission"))
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è —ç–∫–∑–µ–º–ø–ª—è—Ä Bot
    await do_next_core(message.bot)

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É, —á—Ç–æ –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    await message.reply(
        get_message(user_lang, "next_done", default="‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã."),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(lambda cb: cb.data == "reset_day")
async def callback_reset_day(callback: CallbackQuery, state: FSMContext):
    """
    –¢–æ—Ç –∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —á—Ç–æ –∏ /next, –Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "reset_day" –≤ –∞–¥–º–∏–Ω‚Äê–º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    user_lang = await get_user_language(user_id)

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏, –ø—Ä–∏—à–µ–¥—à–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    me = await callback.bot.get_me()
    if callback.from_user.id == me.id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_user_admin(user_id):
        return await safe_answer(
            callback,
            get_message(user_lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞
    await do_next_core(callback.bot)

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ)
    await safe_answer(
        callback,
        get_message(user_lang, "next_done", default="‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã."),
        show_alert=True
    )


def register_daily_scheduler(dp, bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è Asia/Shanghai.
    –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä–æ–≤–Ω–æ 03:00, –∑–∞–ø—É—Å–∫–∞–µ—Ç do_next_core(bot) –∏ –∂–¥–µ—Ç 61 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –¥–≤–∞–∂–¥—ã –∑–∞ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É.
    –í—ã–∑—ã–≤–∞—Ç—å –≤ main.py —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤:
        register_daily_scheduler(dp, bot)
    """
    async def _scheduler():
        while True:
            try:
                now = datetime.datetime.now(ZoneInfo("Asia/Shanghai"))
                # –ï—Å–ª–∏ —Ä–æ–≤–Ω–æ 03:00, –∑–∞–ø—É—Å–∫–∞–µ–º reset
                if now.hour == 3 and now.minute == 0:
                    logger.info("–ê–≤—Ç–æ‚Äê—Å–±—Ä–æ—Å: —Å–µ–π—á–∞—Å 03:00 Asia/Shanghai ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º do_next_core")
                    try:
                        await do_next_core(bot)
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º do_next_core: %s", e)
                    # –ñ–¥–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
                    await asyncio.sleep(61)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    await asyncio.sleep(60)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ _scheduler: %s", e)
                await asyncio.sleep(60)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤–æ–π —Ç–∞—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ polling
    async def _on_startup():
        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
        asyncio.create_task(_scheduler())

    dp.startup.register(_on_startup)
