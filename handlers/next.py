# handlers/next.py

import logging
from typing import Dict

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command

import db
from config import is_user_admin, FINANCIAL_REPORT_GROUP_ID
from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer
from constants.booking_const import groups_data
from handlers.booking.reporting import update_group_message

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("next"))
async def cmd_next(message: Message, state: FSMContext):
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –∑–∞ "–°–µ–≥–æ–¥–Ω—è" –∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å–µ "–ó–∞–≤—Ç—Ä–∞" ‚Üí "–°–µ–≥–æ–¥–Ω—è".
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    user_id = message.from_user.id
    user_lang = await get_user_language(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
    if not is_user_admin(user_id):
        await message.reply(get_message(user_lang, "no_permission"))
        return

    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
    async with db.db_pool.acquire() as conn:
        # 1) –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        today_bookings = await conn.fetch("SELECT * FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        total_bookings_today = len(today_bookings)

        cash_count = cash_sum = 0
        beznal_count = beznal_sum = 0
        agent_count = agent_sum = 0

        user_bookings_count: Dict[int, int] = {}

        for b in today_bookings:
            pm = b["payment_method"]
            amt = b["amount"] or 0
            uid = b["user_id"]

            user_bookings_count[uid] = user_bookings_count.get(uid, 0) + 1

            if pm == "cash":
                cash_count += 1
                cash_sum += amt
            elif pm == "beznal":
                beznal_count += 1
                beznal_sum += amt
            elif pm == "agent":
                agent_count += 1
                agent_sum += amt

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_lines = []
        for uid, cnt in user_bookings_count.items():
            row_user = await conn.fetchrow(
                "SELECT username FROM users WHERE user_id = $1",
                uid
            )
            uname = row_user["username"] if (row_user and row_user["username"]) else f"User {uid}"
            user_lines.append(f"({uname}) {cnt}")
        user_report = "\n".join(user_lines) if user_lines else "–Ω–µ—Ç"

        # 2) –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
        report_lines = [
            "üóÇÔ∏è <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é –∫–æ–º–∞–Ω–¥–æ–π /next)</b> üóÇÔ∏è\n",
            f"‚è∞ –ë—Ä–æ–Ω–∏: {total_bookings_today}\n",
            f"üíµ –ù–∞–ª: {cash_count}  –∏—Ç–æ–≥: {cash_sum}¬•\n",
            f"üí∏ –ë–µ–∑–Ω–∞–ª: {beznal_count}  –∏—Ç–æ–≥: {beznal_sum}¬•\n",
            f"üßÆ –ê–≥–µ–Ω—Ç: {agent_count}  –∏—Ç–æ–≥: {agent_sum}¬•\n",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            user_report
        ]
        report_text = "\n".join(report_lines)

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ –≥—Ä—É–ø–ø—É
        try:
            await message.bot.send_message(
                FINANCIAL_REPORT_GROUP_ID,
                report_text,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É: %s", e)

        # 4) –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        await conn.execute("DELETE FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        await conn.execute("DELETE FROM group_time_slot_statuses WHERE day = '–°–µ–≥–æ–¥–Ω—è'")

        # 5) –û—á–∏—â–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ groups_data –¥–ª—è ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        for gk, ginfo in groups_data.items():
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = []
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = set()
            ginfo["time_slot_statuses"] = {
                (d, ts): st
                for ((d, ts), st) in ginfo["time_slot_statuses"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }
            ginfo["slot_bookers"] = {
                (d, ts): u
                for ((d, ts), u) in ginfo["slot_bookers"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }

        # 6) –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª –≤ –ë–î
        await conn.execute("UPDATE bookings SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")
        await conn.execute("UPDATE group_time_slot_statuses SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")

        # 7) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–∞–º—è—Ç–∏: –ø–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        for gk, ginfo in groups_data.items():
            # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–ø–∏—Å–∫–∏ ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["booked_slots"].get("–ó–∞–≤—Ç—Ä–∞", [])
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["unavailable_slots"].get("–ó–∞–≤—Ç—Ä–∞", set())
            ginfo["booked_slots"]["–ó–∞–≤—Ç—Ä–∞"] = []
            ginfo["unavailable_slots"]["–ó–∞–≤—Ç—Ä–∞"] = set()

            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º time_slot_statuses –∏ slot_bookers —Å —É—á—ë—Ç–æ–º —Å–º–µ–Ω—ã –¥–Ω—è
            new_tss = {}
            for (d, ts), st in ginfo["time_slot_statuses"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_tss[("–°–µ–≥–æ–¥–Ω—è", ts)] = st
                else:
                    new_tss[(d, ts)] = st
            ginfo["time_slot_statuses"] = new_tss

            new_sb = {}
            for (d, ts), u in ginfo["slot_bookers"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_sb[("–°–µ–≥–æ–¥–Ω—è", ts)] = u
                else:
                    new_sb[(d, ts)] = u
            ginfo["slot_bookers"] = new_sb

        # 8) –û–±–Ω–æ–≤–ª—è–µ–º ¬´–≥—Ä—É–ø–ø–æ–≤—ã–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        for gk in groups_data.keys():
            try:
                await update_group_message(message.bot, gk)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s: %s", gk, e)

    # 9) –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await message.reply(
        get_message(user_lang, "next_done", default="‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã."),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(lambda cb: cb.data == "reset_day")
async def callback_reset_day(callback: CallbackQuery, state: FSMContext):
    """
    –¢–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –ª–æ–≥–∏–∫–∞, —á—Ç–æ –∏ /next, –Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "reset_day"
    –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    """
    user_id = callback.from_user.id
    user_lang = await get_user_language(user_id)

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    me = await callback.bot.get_me()
    if callback.from_user.id == me.id:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_user_admin(user_id):
        return await safe_answer(
            callback,
            get_message(user_lang, "admin_only", default="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."),
            show_alert=True
        )

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è /next
    async with db.db_pool.acquire() as conn:
        today_bookings = await conn.fetch("SELECT * FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        total_bookings_today = len(today_bookings)

        cash_count = cash_sum = 0
        beznal_count = beznal_sum = 0
        agent_count = agent_sum = 0

        user_bookings_count: Dict[int, int] = {}

        for b in today_bookings:
            pm = b["payment_method"]
            amt = b["amount"] or 0
            uid = b["user_id"]

            user_bookings_count[uid] = user_bookings_count.get(uid, 0) + 1

            if pm == "cash":
                cash_count += 1
                cash_sum += amt
            elif pm == "beznal":
                beznal_count += 1
                beznal_sum += amt
            elif pm == "agent":
                agent_count += 1
                agent_sum += amt

        user_lines = []
        for uid, cnt in user_bookings_count.items():
            row_user = await conn.fetchrow(
                "SELECT username FROM users WHERE user_id = $1",
                uid
            )
            uname = row_user["username"] if (row_user and row_user["username"]) else f"User {uid}"
            user_lines.append(f"({uname}) {cnt}")
        user_report = "\n".join(user_lines) if user_lines else "–Ω–µ—Ç"

        report_lines = [
            "üóÇÔ∏è <b>–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∫–Ω–æ–ø–∫–æ–π ¬´–°–±—Ä–æ—Å –¥–Ω—è¬ª)</b> üóÇÔ∏è\n",
            f"‚è∞ –ë—Ä–æ–Ω–∏: {total_bookings_today}\n",
            f"üíµ –ù–∞–ª: {cash_count}  –∏—Ç–æ–≥: {cash_sum}¬•\n",
            f"üí∏ –ë–µ–∑–Ω–∞–ª: {beznal_count}  –∏—Ç–æ–≥: {beznal_sum}¬•\n",
            f"üßÆ –ê–≥–µ–Ω—Ç: {agent_count}  –∏—Ç–æ–≥: {agent_sum}¬•\n",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            user_report
        ]
        report_text = "\n".join(report_lines)

        try:
            await callback.bot.send_message(
                FINANCIAL_REPORT_GROUP_ID,
                report_text,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø—É: %s", e)

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª
        await conn.execute("DELETE FROM bookings WHERE day = '–°–µ–≥–æ–¥–Ω—è'")
        await conn.execute("DELETE FROM group_time_slot_statuses WHERE day = '–°–µ–≥–æ–¥–Ω—è'")

        # –û—á–∏—â–∞–µ–º internal structures
        for gk, ginfo in groups_data.items():
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = []
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = set()
            ginfo["time_slot_statuses"] = {
                (d, ts): st
                for ((d, ts), st) in ginfo["time_slot_statuses"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }
            ginfo["slot_bookers"] = {
                (d, ts): u
                for ((d, ts), u) in ginfo["slot_bookers"].items()
                if d != "–°–µ–≥–æ–¥–Ω—è"
            }

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º ¬´–ó–∞–≤—Ç—Ä–∞¬ª ‚Üí ¬´–°–µ–≥–æ–¥–Ω—è¬ª –≤ –ë–î
        await conn.execute("UPDATE bookings SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")
        await conn.execute("UPDATE group_time_slot_statuses SET day = '–°–µ–≥–æ–¥–Ω—è' WHERE day = '–ó–∞–≤—Ç—Ä–∞'")

        # –û–±–Ω–æ–≤–ª—è–µ–º memory structures
        for gk, ginfo in groups_data.items():
            ginfo["booked_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["booked_slots"].get("–ó–∞–≤—Ç—Ä–∞", [])
            ginfo["unavailable_slots"]["–°–µ–≥–æ–¥–Ω—è"] = ginfo["unavailable_slots"].get("–ó–∞–≤—Ç—Ä–∞", set())
            ginfo["booked_slots"]["–ó–∞–≤—Ç—Ä–∞"] = []
            ginfo["unavailable_slots"]["–ó–∞–≤—Ç—Ä–∞"] = set()

            new_tss = {}
            for (d, ts), st in ginfo["time_slot_statuses"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_tss[("–°–µ–≥–æ–¥–Ω—è", ts)] = st
                else:
                    new_tss[(d, ts)] = st
            ginfo["time_slot_statuses"] = new_tss

            new_sb = {}
            for (d, ts), u in ginfo["slot_bookers"].items():
                if d == "–ó–∞–≤—Ç—Ä–∞":
                    new_sb[("–°–µ–≥–æ–¥–Ω—è", ts)] = u
                else:
                    new_sb[(d, ts)] = u
            ginfo["slot_bookers"] = new_sb

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for gk in groups_data.keys():
            try:
                await update_group_message(callback.bot, gk)
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è %s: %s", gk, e)

    # –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∫–æ–ª–ª–±—ç–∫)
    await safe_answer(
        callback,
        get_message(user_lang, "next_done", default="‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã."),
        show_alert=True
    )
