import json
import asyncio
import logging

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton,
    InlineKeyboardMarkup, InputMediaPhoto
)
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import db

logger = logging.getLogger(__name__)

def is_user_admin(user_id: int) -> bool:
    return user_id in [7894353415, 7935161063, 1768520583]

class NewsStates(StatesGroup):
    waiting_for_photos = State()
    waiting_for_text = State()
    waiting_for_edit_text = State()

router = Router()

@router.message(Command("added"))
async def cmd_added(message: Message, state: FSMContext):
    if not is_user_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="news_add")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="news_edit")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="news_delete")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="news_cancel")]
    ])
    msg = await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏:", reply_markup=kb)
    await state.update_data(base_chat_id=msg.chat.id, base_message_id=msg.message_id)

@router.callback_query(F.data.in_(["news_add", "news_edit", "news_delete", "news_cancel"]))
async def process_news_action(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
        return

    data = await state.get_data()
    base_chat_id = data.get("base_chat_id")
    base_msg_id = data.get("base_message_id")
    action = callback.data

    if action == "news_cancel":
        if base_chat_id and base_msg_id:
            try:
                await callback.message.bot.delete_message(base_chat_id, base_msg_id)
            except:
                pass
        await state.clear()
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    if action == "news_delete":
        async with db.db_pool.acquire() as conn:
            await conn.execute("DELETE FROM news")
        await callback.message.edit_text("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã.")
        await asyncio.sleep(2)
        if base_chat_id and base_msg_id:
            try:
                await callback.message.bot.delete_message(base_chat_id, base_msg_id)
            except:
                pass
        await state.clear()
        await callback.answer("–ì–æ—Ç–æ–≤–æ.")
        return

    if action == "news_edit":
        await callback.message.edit_text(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–µ–º–æ). –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å c id=1."
        )
        await state.set_state(NewsStates.waiting_for_edit_text)
        await callback.answer()
    elif action == "news_add":
        await state.update_data(file_ids=[])
        await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ—Å–ª–µ ‚Äî /done")
        await state.set_state(NewsStates.waiting_for_photos)
        await callback.answer()

@router.message(StateFilter(NewsStates.waiting_for_photos), F.photo)
async def process_news_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    file_ids = data.get("file_ids", [])
    if len(file_ids) >= 10:
        await message.answer("–õ–∏–º–∏—Ç 10 —Ñ–æ—Ç–æ! –í–≤–µ–¥–∏—Ç–µ /done, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return
    file_ids.append(message.photo[-1].file_id)
    await state.update_data(file_ids=file_ids)
    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ /done")

@router.message(Command("done"), StateFilter(NewsStates.waiting_for_photos))
async def photos_done(message: Message, state: FSMContext):
    data = await state.get_data()
    file_ids = data.get("file_ids", [])
    if not file_ids:
        await message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ. /done –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    await state.update_data(file_ids=file_ids)
    base_chat_id = data.get("base_chat_id")
    base_msg_id = data.get("base_message_id")

    if base_chat_id and base_msg_id:
        try:
            await message.bot.edit_message_text(
                text="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:",
                chat_id=base_chat_id,
                message_id=base_msg_id
            )
        except:
            pass

    await state.set_state(NewsStates.waiting_for_text)

@router.message(StateFilter(NewsStates.waiting_for_text), F.text)
async def process_news_text(message: Message, state: FSMContext):
    news_text = message.text.strip()
    data = await state.get_data()
    file_ids = data.get("file_ids", [])

    async with db.db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO news (file_ids, text) VALUES ($1, $2)",
            json.dumps(file_ids),
            news_text
        )

    await state.clear()
    await message.answer("–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

@router.message(StateFilter(NewsStates.waiting_for_edit_text), F.text)
async def process_edit_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    async with db.db_pool.acquire() as conn:
        await conn.execute(
            "UPDATE news SET text=$1 WHERE id=1",
            new_text
        )
    await state.clear()
    await message.answer("–ù–æ–≤–æ—Å—Ç—å (id=1) –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@router.message(Command("news"))
async def cmd_show_news(message: Message):
    if db.db_pool is None:
        await message.answer("db_pool == None, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return

    async with db.db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, file_ids, text FROM news ORDER BY id DESC")

    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    for row in rows:
        text_part = row["text"] or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        files = json.loads(row["file_ids"] or "[]")
        await message.answer(f"üì∞ ID={row['id']}: {text_part}")
        if files:
            album = []
            for i, fid in enumerate(files[:10]):
                if i == 0:
                    album.append(InputMediaPhoto(media=fid, caption="–§–æ—Ç–æ"))
                else:
                    album.append(InputMediaPhoto(media=fid))
            await message.answer_media_group(album)