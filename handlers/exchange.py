# handlers/exchange.py

import logging
import requests
import os

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers.language import get_user_language, get_message
from utils.bot_utils import safe_answer
from utils.text_utils import format_html_pre  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –æ–±—ë—Ä—Ç–∫—É

logger = logging.getLogger(__name__)
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–∞–ª—é—Ç –∏ –∏—Ö —Ñ–ª–∞–≥–∏/–∏–º–µ–Ω–∞
CURRENCIES = {
    'RUB': {'name': '–†—É–±–ª—å',  'flag': 'üá∑üá∫'},
    'USD': {'name': '–î–æ–ª–ª–∞—Ä', 'flag': 'üá∫üá∏'},
    'UAH': {'name': '–ì—Ä–∏–≤–Ω–∞', 'flag': 'üá∫üá¶'},
    'CNY': {'name': '–Æ–∞–Ω—å',   'flag': 'üá®üá≥'},
    'EUR': {'name': '–ï–≤—Ä–æ',   'flag': 'üá™üá∫'},
    'USDT': {'name': 'Tether','flag': 'üè¥‚Äç‚ò†Ô∏è'},
}


def get_usdt_rate_coingecko():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—É—Ä—Å USDT —á–µ—Ä–µ–∑ CoinGecko API (–≤ USD) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    url = "https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=usd"
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            logger.info("CoinGecko response for USDT: %s", data)
            usd_value = data.get("tether", {}).get("usd")
            if usd_value and usd_value != 0:
                return 1.0 / float(usd_value)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USDT —Å CoinGecko: %s", e)
    return None


def get_fiat_rates():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫—É—Ä—Å—ã (USD ‚Üí RUB, UAH, CNY, EUR) —á–µ—Ä–µ–∑ open.er-api.com.
    """
    url = "https://open.er-api.com/v6/latest/USD"
    try:
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            logger.info("open.er-api.com response: %s", data)
            rates = data.get("rates", {})
            filtered = {
                key: rates.get(key)
                for key in ["RUB", "UAH", "CNY", "EUR"]
            }
            filtered["USD"] = 1.0
            logger.info("–§–∏–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã: %s", filtered)
            return filtered
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Å open.er-api.com: %s", e)
    return {}


def get_all_rates(base_currency: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ base_currency.
    –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∏–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç USDT.
    """
    rates = get_fiat_rates()
    usdt_rate = get_usdt_rate_coingecko()
    if usdt_rate is not None:
        rates["USDT"] = usdt_rate
    if not rates:
        return {}

    base_currency = base_currency.upper()
    # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ ‚Äî USD, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
    if base_currency == "USD":
        return rates

    if base_currency in rates:
        base_to_usd = 1.0 / rates[base_currency]
        converted = {}
        for code, r in rates.items():
            converted[code] = base_to_usd * r
        return converted

    return {}


def convert_and_format(amount: float, base_currency: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç amount –∏–∑ base_currency –≤–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π, –æ–±—ë—Ä–Ω—É—Ç—É—é –≤ <pre>‚Ä¶</pre>.
    """
    base_currency = base_currency.upper()
    rates = get_all_rates(base_currency)
    if not rates:
        return format_html_pre("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.")

    result_lines = [f"üí± {amount} {base_currency} ="]
    for code, rate in rates.items():
        if code == base_currency:
            continue
        converted = round(amount * rate, 2)
        flag = CURRENCIES.get(code, {}).get("flag", "")
        name = CURRENCIES.get(code, {}).get("name", code)
        result_lines.append(f"{flag} {converted} {code} ‚Äî {name}")

    # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <pre>
    full_text = "\n".join(result_lines)
    return format_html_pre(full_text)


# FSM –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
class ConversionStates(StatesGroup):
    waiting_for_input = State()


@router.callback_query(F.data == "conversion")
async def callback_conversion(callback: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ‚Äú–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è‚Äù:
    1) —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω-–º–µ–Ω—é),
    2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–±–µ–∑ <pre>),
    3) –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã.
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–º–µ–Ω—é)
    try:
        await callback.message.delete()
    except:
        pass

    lang = await get_user_language(callback.from_user.id)
    prompt = get_message(
        lang,
        "enter_conversion",
        default="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 USD)"
    )

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç; –∏–Ω–∞—á–µ –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    photo_path = "photo/IMG_2585.JPG"
    if not os.path.exists(photo_path):
        # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ‚Äî –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        # –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –ø—É—Ç—å
        logger.warning("Photo for conversion prompt not found: %s", photo_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–±–µ–∑ parse_mode, —Ç–∞–∫ –∫–∞–∫ –∑–¥–µ—Å—å —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç)
    await safe_answer(
        callback,
        photo=photo_path,
        caption=prompt
    )
    await state.set_state(ConversionStates.waiting_for_input)


@router.message(ConversionStates.waiting_for_input, F.text)
async def process_conversion_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ ‚Äú100 USD‚Äù:
    1) –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç,
    2) –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å <pre>),
    3) —É–¥–∞–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç,
    4) —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç FSM.
    """
    text = message.text.strip()
    parts = text.split()
    if len(parts) != 2:
        error = format_html_pre("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100 USD")
        return await safe_answer(message, error, parse_mode=ParseMode.HTML)

    amount_str, base_currency = parts
    try:
        amount = float(amount_str.replace(",", "."))
    except ValueError:
        error = format_html_pre("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return await safe_answer(message, error, parse_mode=ParseMode.HTML)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (—É–∂–µ –æ–±—ë—Ä–Ω—É—Ç—ã–π –≤ <pre>‚Ä¶</pre>)
    result = convert_and_format(amount, base_currency)

    # –ü—É—Ç—å –¥–æ —Ç–æ–π –∂–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    photo_path = "photo/IMG_2585.JPG"
    if not os.path.exists(photo_path):
        logger.warning("Photo for conversion result not found: %s", photo_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç (parse_mode=HTML, —á—Ç–æ–±—ã <pre> —Ä–∞–±–æ—Ç–∞–ª)
    await safe_answer(
        message,
        photo=photo_path,
        caption=result,
        parse_mode=ParseMode.HTML
    )

    # –°–±—Ä–æ—Å FSM
    await state.clear()
