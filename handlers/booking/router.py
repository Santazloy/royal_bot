# handlers/booking/router.py

import logging
import html
from aiogram import Bot, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import db
from constants.booking_const import (
    BOOKING_REPORT_GROUP_ID, SPECIAL_USER_ID, FINANCIAL_REPORT_GROUP_ID,
    GROUP_CHOICE_IMG, DAY_CHOICE_IMG, TIME_CHOICE_IMG, FINAL_BOOKED_IMG,
    special_payments, status_mapping, distribution_variants, groups_data
)
from constants.salary import salary_options
from utils.user_utils import get_user_language
from utils.text_utils import get_message, format_html_pre
from utils.time_utils import (
    generate_daily_time_slots as generate_time_slots,
    get_adjacent_time_slots, get_slot_datetime_shanghai
)

# **–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π** –∏–º–ø–æ—Ä—Ç BookingRepo –∏ –¥–∞—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
from db_access.booking_repo import BookingRepo
from handlers.booking.data_manager import BookingDataManager

from app_states import BookUserStates, BookPaymentStates

logger = logging.getLogger(__name__)
router = Router()

repo = BookingRepo(db.db_pool)
data_mgr = BookingDataManager(groups_data)


@router.message(Command("book"))
async def cmd_book(message: Message, state: FSMContext):
    await state.clear()
    keys = data_mgr.list_group_keys()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=k, callback_data=f"bkgrp_{k}") for k in keys[i:i+3]]
            for i in range(0, len(keys), 3)
        ]
    )
    await message.answer_photo(photo=GROUP_CHOICE_IMG, caption="", reply_markup=kb)
    await state.set_state(BookUserStates.waiting_for_group)


@router.callback_query(StateFilter(BookUserStates.waiting_for_group), F.data.startswith("bkgrp_"))
async def user_select_group(cb: CallbackQuery, state: FSMContext):
    gk = cb.data.removeprefix("bkgrp_")
    if gk not in groups_data:
        return await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
    await state.update_data(selected_group=gk)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="bkday_–°–µ–≥–æ–¥–Ω—è"),
                InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="bkday_–ó–∞–≤—Ç—Ä–∞"),
            ]
        ]
    )
    try:
        await cb.message.edit_media(
            media=InputMediaPhoto(media=DAY_CHOICE_IMG, caption=""), reply_markup=kb
        )
    except TelegramBadRequest:
        await cb.message.answer_photo(photo=DAY_CHOICE_IMG, caption="", reply_markup=kb)

    await cb.answer()
    await state.set_state(BookUserStates.waiting_for_day)


@router.callback_query(StateFilter(BookUserStates.waiting_for_day), F.data.startswith("bkday_"))
async def user_select_day(cb: CallbackQuery, state: FSMContext):
    day = cb.data.removeprefix("bkday_")
    await state.update_data(selected_day=day)
    await send_time_slots(cb, day, state)

# –¥–µ–ª–∞–µ–º —Ç–∞–∫:
async def send_time_slots(
    callback_query: CallbackQuery,
    selected_day: str,
    state: FSMContext
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã + –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è.
    """
    data = await state.get_data()
    gk = data["selected_group"]
    ginfo = groups_data[gk]

    # 1) –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    busy = set(ginfo["booked_slots"].get(selected_day, []))
    for bs in list(busy):
        busy.update(get_adjacent_time_slots(bs))
    busy |= ginfo["unavailable_slots"].get(selected_day, set())

    # 2) –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    final = {'‚ùå‚ùå‚ùå', '‚úÖ', '‚úÖ2', '‚úÖ‚úÖ', '‚úÖ‚úÖ‚úÖ'}
    for (d, t), st in ginfo["time_slot_statuses"].items():
        if d == selected_day and st in final:
            busy.add(t)

    # 3) –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    builder = InlineKeyboardBuilder()
    for slot in generate_time_slots():
        if slot not in busy:
            builder.button(text=slot, callback_data=f"bkslot_{slot.replace(':','_')}")
    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    builder.button(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkday_back")
    builder.adjust(4)
    kb = builder.as_markup()

    # 4) –ü–æ–¥–ø–∏—Å—å
    lang = await get_user_language(callback_query.from_user.id)
    day_label = get_message(lang, 'today') if selected_day == '–°–µ–≥–æ–¥–Ω—è' else get_message(lang, 'tomorrow')
    text = get_message(lang, 'choose_time_styled', day=day_label)
    caption = format_html_pre(text)

    # 5) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ —à–ª—ë–º –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞
    try:
        await callback_query.message.edit_media(
            media=InputMediaPhoto(media=TIME_CHOICE_IMG, caption=caption),
            reply_markup=kb
        )
    except TelegramBadRequest:
        await callback_query.message.answer_photo(
            photo=TIME_CHOICE_IMG, caption=caption, reply_markup=kb
        )

    await callback_query.answer()
    await state.set_state(BookUserStates.waiting_for_time)

@router.callback_query(StateFilter(BookUserStates.waiting_for_time), F.data.startswith("bkslot_"))
async def user_select_time(cb: CallbackQuery, state: FSMContext):
    slot = cb.data.removeprefix("bkslot_").replace("_", ":")
    data = await state.get_data()
    gk, day, uid = data["selected_group"], data["selected_day"], cb.from_user.id

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–∞–º—è—Ç–∏
    data_mgr.book_slot(gk, day, slot, uid)
    # –ó–∞–ø–∏—Å—å –≤ –ë–î: —Å–æ–∑–¥–∞—ë–º booking
    iso = get_slot_datetime_shanghai(day, slot)
    await repo.add_booking(gk, day, slot, uid, iso)

    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü. –≥—Ä—É–ø–ø—É
    await send_booking_report(cb.bot, uid, gk, slot, day)
    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    lang = await get_user_language(uid)
    txt = get_message(lang, 'slot_booked', time=slot, day=day, group=gk)
    caption = format_html_pre(txt)
    try:
        await cb.message.edit_media(
            media=InputMediaPhoto(media=FINAL_BOOKED_IMG, caption=caption),
            reply_markup=None,
        )
    except TelegramBadRequest:
        await cb.message.answer_photo(photo=FINAL_BOOKED_IMG, caption=caption)

    await cb.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ —Å booked
    await update_group_message(cb.bot, gk)


async def send_booking_report(bot: Bot, uid: int, gk: str, slot: str, day: str):
    username = f"User {uid}"
    user_emoji = "‚ùì"
    if db.db_pool:
        try:
            async with db.db_pool.acquire() as con:
                row = await con.fetchrow(
                    "SELECT u.username, e.emoji "
                    "FROM users u LEFT JOIN user_emojis e ON u.user_id=e.user_id "
                    "WHERE u.user_id=$1",
                    uid,
                )
                if row:
                    username = row["username"] or username
                    user_emoji = (row["emoji"] or "").split(",")[0] or user_emoji
        except Exception as e:
            logger.error(e)

    body = (
        f"üìÖ –ù–æ–≤—ã–π Booking\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_emoji} {html.escape(username)}\n"
        f"üåπ –ì—Ä—É–ø–ø–∞: {gk}\n"
        f"‚è∞ –í—Ä–µ–º—è: {slot} ({day})"
    )
    await bot.send_message(
        chat_id=BOOKING_REPORT_GROUP_ID,
        text=f"<pre>{body}</pre>",
        parse_mode=ParseMode.HTML,
    )


@router.callback_query(F.data.startswith("group_time|"))
async def admin_click_slot(cb: CallbackQuery):
    """
    –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´<–¥–µ–Ω—å> <–≤—Ä–µ–º—è>¬ª –≤ –≥—Ä—É–ø—á–∞—Ç–∏–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ + –∫—Ä–µ—Å—Ç–∏–∫ –û—Ç–º–µ–Ω–∏—Ç—å + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    _, gk, day, slot = cb.data.split("|")
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!", show_alert=True)

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
    # ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ‚úÖ, ‚úÖ2, ‚úÖ‚úÖ, ‚úÖ‚úÖ‚úÖ
    # ‚Äî –≤—Ç–æ—Ä–∞—è: ‚ùå‚ùå‚ùå (–æ—Ç–º–µ–Ω–∏—Ç—å)
    # ‚Äî —Ç—Ä–µ—Ç—å—è: ¬´ –ù–∞–∑–∞–¥¬ª
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=emoji,
                callback_data=f"group_status|{gk}|{day}|{slot}|{code}"
            )
            for code, emoji in status_mapping.items()
        ],
        [
            InlineKeyboardButton(
                text="‚ùå‚ùå‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"group_status|{gk}|{day}|{slot}|-1"
            )
        ],
        [
            InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=f"group_status|{gk}|{day}|{slot}|back"
            )
        ]
    ])

    await cb.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )
    await cb.answer()

@router.callback_query(F.data.startswith("group_status|"))
async def admin_click_status(cb: CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–º–µ–Ω–∞) –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω ‚ùå‚ùå‚ùå, —Ç–æ –∑–∞–ø–∏—Å—å –∏ —Å–ª–æ—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è, –≤—Å—ë –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å, —Ç–æ —Å–ª–æ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–º, –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç.
    """
    parts = cb.data.split("|")
    _, gk, day, slot, code = parts
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞–ª –∞–¥–º–∏–Ω
    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" -> –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if code == "back":
        await update_group_message(cb.bot, gk)
        return await cb.answer()

    # [!!! CHANGE] –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ ‚ùå‚ùå‚ùå ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—Å—ë —á–∏—Å—Ç–∏–º
    if code == "-1":
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        uid = ginfo["slot_bookers"].pop((day, slot), None)
        if uid and slot in ginfo["booked_slots"].get(day, []):
            ginfo["booked_slots"][day].remove(slot)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ª–æ—Ç—ã –∏–∑ unavailable, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª–∏ —ç—Ç–æ–º—É –∂–µ —é–∑–µ—Ä—É
        adjs = get_adjacent_time_slots(slot)
        for adj in adjs:
            if adj in ginfo["unavailable_slots"][day]:
                ginfo["unavailable_slots"][day].remove(adj)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
                if (day, adj) in ginfo["time_slot_statuses"]:
                    del ginfo["time_slot_statuses"][(day, adj)]
                # –£–¥–∞–ª—è–µ–º booker, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (day, adj) in ginfo["slot_bookers"]:
                    if ginfo["slot_bookers"][(day, adj)] == uid:
                        ginfo["slot_bookers"].pop((day, adj), None)

        # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ—Ç –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        if (day, slot) in ginfo["time_slot_statuses"]:
            del ginfo["time_slot_statuses"][(day, slot)]

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        try:
            if db.db_pool:
                async with db.db_pool.acquire() as con:
                    await con.execute(
                        "DELETE FROM bookings "
                        "WHERE group_key=$1 AND day=$2 AND time_slot=$3",
                        gk, day, slot
                    )# handlers/booking/router.py

import logging
import html
from aiogram import Bot, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import db
from constants.booking_const import (
    BOOKING_REPORT_GROUP_ID, SPECIAL_USER_ID, FINANCIAL_REPORT_GROUP_ID,
    GROUP_CHOICE_IMG, DAY_CHOICE_IMG, TIME_CHOICE_IMG, FINAL_BOOKED_IMG,
    special_payments, status_mapping, distribution_variants, groups_data
)
from constants.salary import salary_options
from utils.user_utils import get_user_language
from utils.text_utils import get_message, format_html_pre
from utils.time_utils import (
    generate_daily_time_slots as generate_time_slots,
    get_adjacent_time_slots, get_slot_datetime_shanghai
)

# **–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π** –∏–º–ø–æ—Ä—Ç BookingRepo –∏ –¥–∞—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
from db_access.booking_repo import BookingRepo
from handlers.booking.data_manager import BookingDataManager

from app_states import BookUserStates, BookPaymentStates

logger = logging.getLogger(__name__)
router = Router()

repo = BookingRepo(db.db_pool)
data_mgr = BookingDataManager(groups_data)


@router.message(Command("book"))
async def cmd_book(message: Message, state: FSMContext):
    await state.clear()
    keys = data_mgr.list_group_keys()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=k, callback_data=f"bkgrp_{k}") for k in keys[i:i+3]]
            for i in range(0, len(keys), 3)
        ]
    )
    await message.answer_photo(photo=GROUP_CHOICE_IMG, caption="", reply_markup=kb)
    await state.set_state(BookUserStates.waiting_for_group)


@router.callback_query(StateFilter(BookUserStates.waiting_for_group), F.data.startswith("bkgrp_"))
async def user_select_group(cb: CallbackQuery, state: FSMContext):
    gk = cb.data.removeprefix("bkgrp_")
    if gk not in groups_data:
        return await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
    await state.update_data(selected_group=gk)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="bkday_–°–µ–≥–æ–¥–Ω—è"),
                InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="bkday_–ó–∞–≤—Ç—Ä–∞"),
            ]
        ]
    )
    try:
        await cb.message.edit_media(
            media=InputMediaPhoto(media=DAY_CHOICE_IMG, caption=""), reply_markup=kb
        )
    except TelegramBadRequest:
        await cb.message.answer_photo(photo=DAY_CHOICE_IMG, caption="", reply_markup=kb)

    await cb.answer()
    await state.set_state(BookUserStates.waiting_for_day)


@router.callback_query(StateFilter(BookUserStates.waiting_for_day), F.data.startswith("bkday_"))
async def user_select_day(cb: CallbackQuery, state: FSMContext):
    day = cb.data.removeprefix("bkday_")
    await state.update_data(selected_day=day)
    await send_time_slots(cb, day, state)

# –¥–µ–ª–∞–µ–º —Ç–∞–∫:
async def send_time_slots(
    callback_query: CallbackQuery,
    selected_day: str,
    state: FSMContext
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã + –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è.
    """
    data = await state.get_data()
    gk = data["selected_group"]
    ginfo = groups_data[gk]

    # 1) –°–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    busy = set(ginfo["booked_slots"].get(selected_day, []))
    for bs in list(busy):
        busy.update(get_adjacent_time_slots(bs))
    busy |= ginfo["unavailable_slots"].get(selected_day, set())

    # 2) –ë–ª–æ–∫–∏—Ä—É–µ–º –ª—é–±—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    final = {'‚ùå‚ùå‚ùå', '‚úÖ', '‚úÖ2', '‚úÖ‚úÖ', '‚úÖ‚úÖ‚úÖ'}
    for (d, t), st in ginfo["time_slot_statuses"].items():
        if d == selected_day and st in final:
            busy.add(t)

    # 3) –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    builder = InlineKeyboardBuilder()
    for slot in generate_time_slots():
        if slot not in busy:
            builder.button(text=slot, callback_data=f"bkslot_{slot.replace(':','_')}")
    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    builder.button(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkday_back")
    builder.adjust(4)
    kb = builder.as_markup()

    # 4) –ü–æ–¥–ø–∏—Å—å
    lang = await get_user_language(callback_query.from_user.id)
    day_label = get_message(lang, 'today') if selected_day == '–°–µ–≥–æ–¥–Ω—è' else get_message(lang, 'tomorrow')
    text = get_message(lang, 'choose_time_styled', day=day_label)
    caption = format_html_pre(text)

    # 5) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ —à–ª—ë–º –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞
    try:
        await callback_query.message.edit_media(
            media=InputMediaPhoto(media=TIME_CHOICE_IMG, caption=caption),
            reply_markup=kb
        )
    except TelegramBadRequest:
        await callback_query.message.answer_photo(
            photo=TIME_CHOICE_IMG, caption=caption, reply_markup=kb
        )

    await callback_query.answer()
    await state.set_state(BookUserStates.waiting_for_time)

@router.callback_query(StateFilter(BookUserStates.waiting_for_time), F.data.startswith("bkslot_"))
async def user_select_time(cb: CallbackQuery, state: FSMContext):
    slot = cb.data.removeprefix("bkslot_").replace("_", ":")
    data = await state.get_data()
    gk, day, uid = data["selected_group"], data["selected_day"], cb.from_user.id

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–∞–º—è—Ç–∏
    data_mgr.book_slot(gk, day, slot, uid)
    # –ó–∞–ø–∏—Å—å –≤ –ë–î: —Å–æ–∑–¥–∞—ë–º booking
    iso = get_slot_datetime_shanghai(day, slot)
    await repo.add_booking(gk, day, slot, uid, iso)

    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ø–µ—Ü. –≥—Ä—É–ø–ø—É
    await send_booking_report(cb.bot, uid, gk, slot, day)
    await state.clear()

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    lang = await get_user_language(uid)
    txt = get_message(lang, 'slot_booked', time=slot, day=day, group=gk)
    caption = format_html_pre(txt)
    try:
        await cb.message.edit_media(
            media=InputMediaPhoto(media=FINAL_BOOKED_IMG, caption=caption),
            reply_markup=None,
        )
    except TelegramBadRequest:
        await cb.message.answer_photo(photo=FINAL_BOOKED_IMG, caption=caption)

    await cb.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ —Å booked
    await update_group_message(cb.bot, gk)


async def send_booking_report(bot: Bot, uid: int, gk: str, slot: str, day: str):
    username = f"User {uid}"
    user_emoji = "‚ùì"
    if db.db_pool:
        try:
            async with db.db_pool.acquire() as con:
                row = await con.fetchrow(
                    "SELECT u.username, e.emoji "
                    "FROM users u LEFT JOIN user_emojis e ON u.user_id=e.user_id "
                    "WHERE u.user_id=$1",
                    uid,
                )
                if row:
                    username = row["username"] or username
                    user_emoji = (row["emoji"] or "").split(",")[0] or user_emoji
        except Exception as e:
            logger.error(e)

    body = (
        f"üìÖ –ù–æ–≤—ã–π Booking\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_emoji} {html.escape(username)}\n"
        f"üåπ –ì—Ä—É–ø–ø–∞: {gk}\n"
        f"‚è∞ –í—Ä–µ–º—è: {slot} ({day})"
    )
    await bot.send_message(
        chat_id=BOOKING_REPORT_GROUP_ID,
        text=f"<pre>{body}</pre>",
        parse_mode=ParseMode.HTML,
    )


@router.callback_query(F.data.startswith("group_time|"))
async def admin_click_slot(cb: CallbackQuery):
    """
    –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´<–¥–µ–Ω—å> <–≤—Ä–µ–º—è>¬ª –≤ –≥—Ä—É–ø—á–∞—Ç–∏–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ + –∫—Ä–µ—Å—Ç–∏–∫ –û—Ç–º–µ–Ω–∏—Ç—å + ¬´–ù–∞–∑–∞–¥¬ª.
    """
    _, gk, day, slot = cb.data.split("|")
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!", show_alert=True)

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
    # ‚Äî –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: ‚úÖ, ‚úÖ2, ‚úÖ‚úÖ, ‚úÖ‚úÖ‚úÖ
    # ‚Äî –≤—Ç–æ—Ä–∞—è: ‚ùå‚ùå‚ùå (–æ—Ç–º–µ–Ω–∏—Ç—å)
    # ‚Äî —Ç—Ä–µ—Ç—å—è: ¬´ –ù–∞–∑–∞–¥¬ª
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=emoji,
                callback_data=f"group_status|{gk}|{day}|{slot}|{code}"
            )
            for code, emoji in status_mapping.items()
        ],
        [
            InlineKeyboardButton(
                text="‚ùå‚ùå‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"group_status|{gk}|{day}|{slot}|-1"
            )
        ],
        [
            InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥",
                callback_data=f"group_status|{gk}|{day}|{slot}|back"
            )
        ]
    ])

    await cb.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞:</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=kb
    )
    await cb.answer()

@router.callback_query(F.data.startswith("group_status|"))
async def admin_click_status(cb: CallbackQuery):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–∏–ª–∏ –æ—Ç–º–µ–Ω–∞) –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω ‚ùå‚ùå‚ùå, —Ç–æ –∑–∞–ø–∏—Å—å –∏ —Å–ª–æ—Ç—ã —É–¥–∞–ª—è—é—Ç—Å—è, –≤—Å—ë –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫.
    –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å, —Ç–æ —Å–ª–æ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–º, –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç.
    """
    parts = cb.data.split("|")
    _, gk, day, slot, code = parts
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞–ª –∞–¥–º–∏–Ω
    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer("–ù–µ—Ç –ø—Ä–∞–≤!", show_alert=True)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" -> –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if code == "back":
        await update_group_message(cb.bot, gk)
        return await cb.answer()

    # [!!! CHANGE] –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ ‚ùå‚ùå‚ùå ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—Å—ë —á–∏—Å—Ç–∏–º
    if code == "-1":
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç –∏–∑ –ø–∞–º—è—Ç–∏
        uid = ginfo["slot_bookers"].pop((day, slot), None)
        if uid and slot in ginfo["booked_slots"].get(day, []):
            ginfo["booked_slots"][day].remove(slot)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ª–æ—Ç—ã –∏–∑ unavailable, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª–∏ —ç—Ç–æ–º—É –∂–µ —é–∑–µ—Ä—É
        adjs = get_adjacent_time_slots(slot)
        for adj in adjs:
            if adj in ginfo["unavailable_slots"][day]:
                ginfo["unavailable_slots"][day].remove(adj)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
                if (day, adj) in ginfo["time_slot_statuses"]:
                    del ginfo["time_slot_statuses"][(day, adj)]
                # –£–¥–∞–ª—è–µ–º booker, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (day, adj) in ginfo["slot_bookers"]:
                    if ginfo["slot_bookers"][(day, adj)] == uid:
                        ginfo["slot_bookers"].pop((day, adj), None)

        # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ—Ç –∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
        if (day, slot) in ginfo["time_slot_statuses"]:
            del ginfo["time_slot_statuses"][(day, slot)]

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        try:
            if db.db_pool:
                async with db.db_pool.acquire() as con:
                    await con.execute(
                        "DELETE FROM bookings "
                        "WHERE group_key=$1 AND day=$2 AND time_slot=$3",
                        gk, day, slot
                    )
                    await con.execute(
                        "DELETE FROM group_time_slot_statuses "
                        "WHERE group_key=$1 AND day=$2 AND time_slot=$3",
                        gk, day, slot
                    )
        except Exception as e:
            logger.error(f"DB error on delete: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_group_message(cb.bot, gk)
        return await cb.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω.")

    # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (‚úÖ, ‚úÖ2 –∏ —Ç.–¥.)
    emoji = status_mapping.get(code)
    ginfo["time_slot_statuses"][(day, slot)] = emoji

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ –ë–î (status –∏ status_code)
    uid = ginfo["slot_bookers"].get((day, slot))
    if db.db_pool:
        try:
            async with db.db_pool.acquire() as con:
                await con.execute(
                    "UPDATE bookings SET status_code=$1, status=$2 "
                    "WHERE group_key=$3 AND day=$4 AND time_slot=$5",
                    code, emoji, gk, day, slot
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º (–∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º) —Å—Ç–∞—Ç—É—Å—ã
                await con.execute(
                    """
                    INSERT INTO group_time_slot_statuses
                      (group_key, day, time_slot, status, user_id)
                    VALUES ($1,$2,$3,$4,$5)
                    ON CONFLICT (group_key, day, time_slot)
                    DO UPDATE SET status=excluded.status, user_id=excluded.user_id
                    """,
                    gk, day, slot, emoji, uid
                )
        except Exception as e:
            logger.error(f"DB error: {e}")

    # –ü—Ä–∏–º–µ–Ω–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è SPECIAL_USER_ID
    await apply_special_user_reward(code, cb.bot)

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (cash/beznal/agent)
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µ", callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|cash"),
        InlineKeyboardButton(text="–ë–µ–∑–Ω–∞–ª",   callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|beznal"),
        InlineKeyboardButton(text="–ê–≥–µ–Ω—Ç",    callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|agent"),
    ]])
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", parse_mode=ParseMode.HTML, reply_markup=pay_kb)
    await cb.answer()


async def apply_special_user_reward(status_code: str, bot: Bot):
    amount = special_payments.get(status_code, 0)
    if amount <= 0 or not db.db_pool:
        return
    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", SPECIAL_USER_ID)
        if row:
            new = row["balance"] + amount
            await conn.execute("UPDATE users SET balance=$1 WHERE user_id=$2", new, SPECIAL_USER_ID)
        else:
            new = amount
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                SPECIAL_USER_ID, "Special User", amount
            )
    finally:
        await db.db_pool.release(conn)
    try:
        await bot.send_message(SPECIAL_USER_ID, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {amount}¬•.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new}¬•")
    except:
        pass


@router.callback_query(F.data.startswith("payment_method|"))
async def process_payment_method(cb: CallbackQuery, state: FSMContext):
    parts = cb.data.split("|")
    _, gk, day, slot, code, method = parts
    lang = await get_user_language(cb.from_user.id)
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer(get_message(lang, "no_permission"), show_alert=True)

    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer(get_message(lang, "no_permission"), show_alert=True)

    if not db.db_pool:
        return await cb.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", show_alert=True)

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
    finally:
        await db.db_pool.release(conn)
    if not row:
        return await cb.answer(get_message(lang, "no_such_booking"), show_alert=True)

    await cb.answer()
    if method in ("cash", "beznal"):
        txt = get_message(lang, "enter_payment_amount")
        await state.update_data(
            group_key=gk, day=day, time_slot=slot, status_code=code, payment_method=method
        )
        try:
            await cb.bot.edit_message_text(
                chat_id=cb.message.chat.id,
                message_id=cb.message.message_id,
                text=format_html_pre(txt),
                parse_mode=ParseMode.HTML,
            )
        except TelegramBadRequest:
            pass
        await state.set_state(BookPaymentStates.waiting_for_amount)
    else:
        # –ê–≥–µ–Ω—Ç
        await handle_agent_payment(cb, gk, day, slot, code)


async def handle_agent_payment(cb: CallbackQuery, gk: str, day: str, slot: str, status_code: str):
    """
    –ü—Ä–∏ '–ê–≥–µ–Ω—Ç' —Å–≤–æ—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    """
    bot = cb.bot
    uid = cb.from_user.id
    lang = await get_user_language(uid)
    emoji = status_mapping.get(status_code)
    if not emoji:
        return await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å!", show_alert=True)
    ginfo = groups_data.get(gk)
    if not ginfo:
        return await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)

    # –ù–∏–∂–µ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è
    base = salary_options[ginfo["salary_option"]].get(emoji, 0)
    deduct_map = {"0": 1500, "1": 2100, "2": 3000, "3": 4500}
    deduct = deduct_map.get(status_code, 0)

    ginfo["salary"] += base
    conn = await db.db_pool.acquire()
    try:
        await conn.execute("UPDATE group_financial_data SET salary=$1 WHERE group_key=$2", ginfo["salary"], gk)
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
        if not row:
            return await cb.answer(get_message(lang, "no_such_booking"), show_alert=True)
        booked = row["user_id"]
        await update_user_financial_info(booked, -deduct, bot)
        bal_row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", booked)
        bal = bal_row["balance"] if bal_row else 0
        msg = get_message(lang, "changed_balance_user", op="-", amount=deduct, balance=bal)
        await bot.send_message(booked, format_html_pre(msg), parse_mode=ParseMode.HTML)
    finally:
        await db.db_pool.release(conn)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    try:
        await update_group_message(bot, gk)
    except TelegramBadRequest:
        pass

    await send_financial_report(bot)
    await cb.answer("–û–ø–ª–∞—Ç–∞ (agent) —É—á—Ç–µ–Ω–∞.")


async def update_user_financial_info(user_id: int, net_amount: int, bot: Bot):
    """
    –ü—Ä–∏–±–∞–≤–ª—è–µ–º (–∏–ª–∏ –≤—ã—á–∏—Ç–∞–µ–º, –µ—Å–ª–∏ net_amount < 0) net_amount –∫ –±–∞–ª–∞–Ω—Å—É –∏ –ø—Ä–æ—Ñ–∏—Ç—É user_id
    """
    if not db.db_pool:
        return
    try:
        member = await bot.get_chat_member(user_id, user_id)
        uname = member.user.username or f"{member.user.first_name} {member.user.last_name}"
    except:
        uname = f"User_{user_id}"
    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT balance, profit, monthly_profit FROM users WHERE user_id=$1", user_id
        )
        if row:
            b, p, m = row["balance"], row["profit"], row["monthly_profit"]
            nb, np, nm = b + net_amount, p + net_amount, m + net_amount
            await conn.execute(
                "UPDATE users SET balance=$1, profit=$2, monthly_profit=$3, username=$4 WHERE user_id=$5",
                nb, np, nm, uname, user_id
            )
        else:
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                user_id, uname, net_amount
            )
    finally:
        await db.db_pool.release(conn)


async def apply_additional_payment(user_id: int, status_code: str, bot: Bot):
    """
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–ª–∞—á–∏–≤–∞—Ç—å –æ—Å–æ–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (SPECIAL_USER_ID), –Ω–µ –ø—É—Ç–∞—Ç—å —Å apply_special_user_reward().
    –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è.
    """
    if user_id != SPECIAL_USER_ID:
        return
    extra = special_payments.get(status_code, 0)
    if extra <= 0:
        return
    if not db.db_pool:
        return

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", user_id)
        if row:
            newb = row["balance"] + extra
            await conn.execute("UPDATE users SET balance=$1 WHERE user_id=$2", newb, user_id)
            await bot.send_message(
                user_id,
                f"<pre>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {extra}¬•.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {newb}¬•</pre>",
                parse_mode=ParseMode.HTML,
            )
        else:
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                user_id, "Special User", extra
            )
            await bot.send_message(
                user_id,
                f"<pre>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {extra}¬•.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {extra}¬•</pre>",
                parse_mode=ParseMode.HTML,
            )
    finally:
        await db.db_pool.release(conn)


@router.message(StateFilter(BookPaymentStates.waiting_for_amount), F.text)
async def process_payment_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∞–¥–º–∏–Ω–æ–º (—Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã).
    """
    user = message.from_user
    lang = await get_user_language(user.id)
    data = await state.get_data()
    gk, day, slot = data["group_key"], data["day"], data["time_slot"]
    code, method = data["status_code"], data["payment_method"]

    try:
        amt = int(message.text.strip())
    except ValueError:
        return await message.reply(format_html_pre(get_message(lang, "incorrect_input")),
                                   parse_mode=ParseMode.HTML)

    emoji = status_mapping.get(str(code))
    if not emoji:
        await state.clear()
        return await message.reply(get_message(lang, "invalid_data"))

    if not db.db_pool:
        await state.clear()
        return await message.reply("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.")

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
        if not row:
            await state.clear()
            return await message.reply(get_message(lang, "no_such_booking"))
        booked = row["user_id"]

        await conn.execute(
            "UPDATE bookings SET payment_method=$1, amount=$2 "
            "WHERE group_key=$3 AND day=$4 AND time_slot=$5 AND user_id=$6",
            method, amt, gk, day, slot, booked,
        )

        base = salary_options[groups_data[gk]["salary_option"]].get(emoji, 0)
        deduct_map = {"0": 1500, "1": 2100, "2": 3000, "3": 4500}
        deduct = deduct_map.get(str(code), 0)

        groups_data[gk]["salary"] += base
        await conn.execute("UPDATE group_financial_data SET salary=$1 WHERE group_key=$2",
                           groups_data[gk]["salary"], gk)

        if method == "cash":
            groups_data[gk]["cash"] += amt
            await conn.execute("UPDATE group_financial_data SET cash=$1 WHERE group_key=$2",
                               groups_data[gk]["cash"], gk)

        net = amt - deduct
        await update_user_financial_info(booked, net, message.bot)
        await apply_additional_payment(booked, str(code), message.bot)

        # –ï—Å–ª–∏ –µ—Å—Ç—å distribution_variant, –Ω–∞—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        var = groups_data[gk].get("distribution_variant")
        dist_data = distribution_variants.get(var, distribution_variants["variant_400"])
        dist_amt = dist_data.get(str(code), 0)
        tgt = groups_data[gk].get("target_id")
        if dist_amt > 0 and tgt:
            await update_user_financial_info(tgt, dist_amt, message.bot)
    finally:
        await db.db_pool.release(conn)

    try:
        await update_group_message(message.bot, gk)
    except TelegramBadRequest:
        pass

    await send_financial_report(message.bot)
    await state.clear()
    await message.answer(f"–£—á–ª–∏ –æ–ø–ª–∞—Ç—É {amt} (–º–µ—Ç–æ–¥={method}), —Å—Ç–∞—Ç—É—Å={emoji}.")


async def update_group_message(bot: Bot, group_key: str):
    """
    –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (chat_id, message_id),
    –ø–æ–∫–∞–∑—ã–≤–∞—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–ª–æ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö, —á—Ç–æ –µ—â—ë –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'booked'.
    """
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from utils.text_utils import format_html_pre

    ginfo = groups_data[group_key]
    chat_id = ginfo["chat_id"]
    user_lang = "ru"  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ

    # 1) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (—à–∞–ø–∫–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Ç.–¥.)
    lines = [
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  üåπüåπ {group_key} üåπüåπ  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"{get_message(user_lang,'salary')}: {ginfo.get('salary',0)}¬•",
        f"{get_message(user_lang,'cash')}:   {ginfo.get('cash',0)}¬•",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"‚è∞ {get_message(user_lang,'booking_report')} ‚è∞",
    ]

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —ç–º–æ–¥–∑–∏ —é–∑–µ—Ä–æ–≤
    async def get_user_emoji(uid: int) -> str:
        if not uid or not db.db_pool:
            return "‚ùì"
        try:
            async with db.db_pool.acquire() as con:
                row = await con.fetchrow("SELECT emoji FROM user_emojis WHERE user_id=$1", uid)
                if row and row["emoji"]:
                    return row["emoji"].split(",")[0]
        except:
            pass
        return "‚ùì"

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞
    final_statuses = {'‚ùå‚ùå‚ùå','‚úÖ','‚úÖ2','‚úÖ‚úÖ','‚úÖ‚úÖ‚úÖ'}
    for day in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
        lines.append(f"\n{day}:")
        for slot in generate_time_slots():
            st = ginfo["time_slot_statuses"].get((day, slot))
            if st and st in final_statuses:
                # –°–ª–æ—Ç —É–∂–µ –∏–º–µ–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                uid = ginfo["slot_bookers"].get((day, slot))
                user_emoji = await get_user_emoji(uid)
                lines.append(f"{slot} {st} {user_emoji}")

    text = format_html_pre("\n".join(lines))

    # 3) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    old_id = ginfo.get("message_id")
    if old_id:
        try:
            await bot.delete_message(chat_id, old_id)
        except:
            pass

    # 4) –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å `booked`
    builder = InlineKeyboardBuilder()
    for day in ("–°–µ–≥–æ–¥–Ω—è","–ó–∞–≤—Ç—Ä–∞"):
        for slot in generate_time_slots():
            st = ginfo["time_slot_statuses"].get((day, slot))
            # –ï—Å–ª–∏ —Å–ª–æ—Ç `booked` (–µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å) ‚Äî –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É
            if st == "booked":
                builder.button(
                    text=f"{day} {slot}",
                    callback_data=f"group_time|{group_key}|{day}|{slot}"
                )
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
        builder.button(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="ignore")

    builder.adjust(1)
    kb = builder.as_markup()

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
    msg = await bot.send_message(
        chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=kb
    )
    ginfo["message_id"] = msg.message_id

    # 6) –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    if db.db_pool:
        conn = await db.db_pool.acquire()
        try:
            await conn.execute(
                "UPDATE group_financial_data SET message_id=$1 WHERE group_key=$2",
                msg.message_id, group_key
            )
        finally:
            await db.db_pool.release(conn)


async def send_financial_report(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ FINANCIAL_REPORT_GROUP_ID.
    –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    if not db.db_pool:
        return
    total_sal = sum(g["salary"] for g in groups_data.values())
    total_cash= sum(g["cash"]   for g in groups_data.values())

    conn = await db.db_pool.acquire()
    try:
        rows = await conn.fetch("SELECT balance FROM users")
        users_total = sum(r["balance"] for r in rows) if rows else 0
    finally:
        await db.db_pool.release(conn)

    itog1 = total_cash - total_sal
    lines = ["‚ïê‚ïê‚ïê üìä –°–≤–æ–¥–Ω—ã–π —Ñ–∏–Ω. –æ—Ç—á—ë—Ç üìä ‚ïê‚ïê‚ïê\n"]
    for k, g in groups_data.items():
        lines.append(f"[{k}] –ó–ø: {g['salary']}¬• | –ù–∞–ª: {g['cash']}¬•")
        lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    lines += [
        f"\n–ò—Ç–æ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_sal}¬•",
        f"–ò—Ç–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã–µ: {total_cash}¬•",
        f"–ò—Ç–æ–≥1 (cash - salary): {itog1}¬•",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    ]

    # –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    conn = await db.db_pool.acquire()
    try:
        rows = await conn.fetch("""
            SELECT u.user_id, u.username, u.balance, e.emoji
            FROM users u LEFT JOIN user_emojis e ON u.user_id=e.user_id
            ORDER BY u.user_id
        """)
        if rows:
            lines.append("‚ïê‚ïê‚ïê‚ïê‚ïê üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë• ‚ïê‚ïê‚ïê‚ïê‚ïê\n")
            for r in rows:
                uname = r["username"] or f"User {r['user_id']}"
                ub = r["balance"]
                ue = r["emoji"] or "‚ùì"
                lines.append(f"{ue} {uname}: {ub}¬•")
                lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    finally:
        await db.db_pool.release(conn)

    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    lines.append(f"–°—É–º–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_total}¬•")
    total_final = itog1 - users_total
    lines.append(f"‚îÅ‚îÅ‚îÅ‚îÅ TOTAL (–∏—Ç–æ–≥1 - –±–∞–ª–∞–Ω—Å—ã) = {total_final}¬• ‚îÅ‚îÅ‚îÅ‚îÅ")

    report = "<pre>" + "\n".join(lines) + "</pre>"
    try:
        await bot.send_message(FINANCIAL_REPORT_GROUP_ID, report, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω. –æ—Ç—á—ë—Ç–∞: {e}")


@router.callback_query(F.data == "view_all_bookings", StateFilter("*"))
async def cmd_all(cb: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π (–µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ).
    """
    lang = await get_user_language(cb.from_user.id)
    from utils.text_utils import format_html_pre

    group_times = {}
    for gk, g in groups_data.items():
        for d in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
            t = g["booked_slots"].get(d, [])
            if t:
                group_times.setdefault(gk, {})[d] = t

    if not group_times:
        text = get_message(lang, "no_active_bookings")
        try:
            await cb.message.edit_text(text)
        except TelegramBadRequest:
            await safe_delete_and_answer(cb.message, text)
        return await cb.answer()

    lines = []
    for day in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
        disp = get_message(lang, "today") if day == "–°–µ–≥–æ–¥–Ω—è" else get_message(lang, "tomorrow")
        lines.append(f"üìÖ {get_message(lang,'all_bookings_title',day=disp)}")
        if not any(day in v for v in group_times.values()):
            lines.append(get_message(lang, "no_bookings"))
            lines.append("")
            continue

        lines += [
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
            "‚ïë –ì—Ä—É–ø–ø–∞   ‚ïë –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚ïë",
            "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£",
        ]
        for gk, td in group_times.items():
            ts = td.get(day, [])
            if not ts:
                continue
            lines.append(f"‚ïë {gk:<9}‚ïë {ts[0]:<18}‚ïë")
            for s in ts[1:]:
                lines.append(f"‚ïë {'':<9}‚ïë {s:<18}‚ïë")
            lines.append("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")

        if lines[-1].startswith("‚ï†"):
            lines[-1] = "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        else:
            lines.append("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        lines.append("")

    text = format_html_pre("\n".join(lines))
    try:
        await cb.message.edit_text(text, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await safe_delete_and_answer(cb.message, text)
    await cb.answer()

async def safe_delete_and_answer(msg: Message, text: str):
    try:
        await msg.delete()
    except:
        pass
    await msg.answer(text, parse_mode=ParseMode.HTML)

                    await con.execute(
                        "DELETE FROM group_time_slot_statuses "
                        "WHERE group_key=$1 AND day=$2 AND time_slot=$3",
                        gk, day, slot
                    )
        except Exception as e:
            logger.error(f"DB error on delete: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_group_message(cb.bot, gk)
        return await cb.answer("–°–ª–æ—Ç –æ—Ç–º–µ–Ω—ë–Ω.")

    # –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (‚úÖ, ‚úÖ2 –∏ —Ç.–¥.)
    emoji = status_mapping.get(code)
    ginfo["time_slot_statuses"][(day, slot)] = emoji

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ –ë–î (status –∏ status_code)
    uid = ginfo["slot_bookers"].get((day, slot))
    if db.db_pool:
        try:
            async with db.db_pool.acquire() as con:
                await con.execute(
                    "UPDATE bookings SET status_code=$1, status=$2 "
                    "WHERE group_key=$3 AND day=$4 AND time_slot=$5",
                    code, emoji, gk, day, slot
                )
                # –û–±–Ω–æ–≤–ª—è–µ–º (–∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º) —Å—Ç–∞—Ç—É—Å—ã
                await con.execute(
                    """
                    INSERT INTO group_time_slot_statuses
                      (group_key, day, time_slot, status, user_id)
                    VALUES ($1,$2,$3,$4,$5)
                    ON CONFLICT (group_key, day, time_slot)
                    DO UPDATE SET status=excluded.status, user_id=excluded.user_id
                    """,
                    gk, day, slot, emoji, uid
                )
        except Exception as e:
            logger.error(f"DB error: {e}")

    # –ü—Ä–∏–º–µ–Ω–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è SPECIAL_USER_ID
    await apply_special_user_reward(code, cb.bot)

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (cash/beznal/agent)
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–ª–∏—á–Ω—ã–µ", callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|cash"),
        InlineKeyboardButton(text="–ë–µ–∑–Ω–∞–ª",   callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|beznal"),
        InlineKeyboardButton(text="–ê–≥–µ–Ω—Ç",    callback_data=f"payment_method|{gk}|{day}|{slot}|{code}|agent"),
    ]])
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", parse_mode=ParseMode.HTML, reply_markup=pay_kb)
    await cb.answer()


async def apply_special_user_reward(status_code: str, bot: Bot):
    amount = special_payments.get(status_code, 0)
    if amount <= 0 or not db.db_pool:
        return
    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", SPECIAL_USER_ID)
        if row:
            new = row["balance"] + amount
            await conn.execute("UPDATE users SET balance=$1 WHERE user_id=$2", new, SPECIAL_USER_ID)
        else:
            new = amount
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                SPECIAL_USER_ID, "Special User", amount
            )
    finally:
        await db.db_pool.release(conn)
    try:
        await bot.send_message(SPECIAL_USER_ID, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {amount}¬•.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new}¬•")
    except:
        pass


@router.callback_query(F.data.startswith("payment_method|"))
async def process_payment_method(cb: CallbackQuery, state: FSMContext):
    parts = cb.data.split("|")
    _, gk, day, slot, code, method = parts
    lang = await get_user_language(cb.from_user.id)
    ginfo = groups_data.get(gk)
    if not ginfo or cb.message.chat.id != ginfo["chat_id"]:
        return await cb.answer(get_message(lang, "no_permission"), show_alert=True)

    member = await cb.bot.get_chat_member(cb.message.chat.id, cb.from_user.id)
    if member.status not in ("administrator", "creator"):
        return await cb.answer(get_message(lang, "no_permission"), show_alert=True)

    if not db.db_pool:
        return await cb.answer("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", show_alert=True)

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
    finally:
        await db.db_pool.release(conn)
    if not row:
        return await cb.answer(get_message(lang, "no_such_booking"), show_alert=True)

    await cb.answer()
    if method in ("cash", "beznal"):
        txt = get_message(lang, "enter_payment_amount")
        await state.update_data(
            group_key=gk, day=day, time_slot=slot, status_code=code, payment_method=method
        )
        try:
            await cb.bot.edit_message_text(
                chat_id=cb.message.chat.id,
                message_id=cb.message.message_id,
                text=format_html_pre(txt),
                parse_mode=ParseMode.HTML,
            )
        except TelegramBadRequest:
            pass
        await state.set_state(BookPaymentStates.waiting_for_amount)
    else:
        # –ê–≥–µ–Ω—Ç
        await handle_agent_payment(cb, gk, day, slot, code)


async def handle_agent_payment(cb: CallbackQuery, gk: str, day: str, slot: str, status_code: str):
    """
    –ü—Ä–∏ '–ê–≥–µ–Ω—Ç' —Å–≤–æ—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    """
    bot = cb.bot
    uid = cb.from_user.id
    lang = await get_user_language(uid)
    emoji = status_mapping.get(status_code)
    if not emoji:
        return await cb.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å!", show_alert=True)
    ginfo = groups_data.get(gk)
    if not ginfo:
        return await cb.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)

    # –ù–∏–∂–µ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤–æ—è
    base = salary_options[ginfo["salary_option"]].get(emoji, 0)
    deduct_map = {"0": 1500, "1": 2100, "2": 3000, "3": 4500}
    deduct = deduct_map.get(status_code, 0)

    ginfo["salary"] += base
    conn = await db.db_pool.acquire()
    try:
        await conn.execute("UPDATE group_financial_data SET salary=$1 WHERE group_key=$2", ginfo["salary"], gk)
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
        if not row:
            return await cb.answer(get_message(lang, "no_such_booking"), show_alert=True)
        booked = row["user_id"]
        await update_user_financial_info(booked, -deduct, bot)
        bal_row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", booked)
        bal = bal_row["balance"] if bal_row else 0
        msg = get_message(lang, "changed_balance_user", op="-", amount=deduct, balance=bal)
        await bot.send_message(booked, format_html_pre(msg), parse_mode=ParseMode.HTML)
    finally:
        await db.db_pool.release(conn)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    try:
        await update_group_message(bot, gk)
    except TelegramBadRequest:
        pass

    await send_financial_report(bot)
    await cb.answer("–û–ø–ª–∞—Ç–∞ (agent) —É—á—Ç–µ–Ω–∞.")


async def update_user_financial_info(user_id: int, net_amount: int, bot: Bot):
    """
    –ü—Ä–∏–±–∞–≤–ª—è–µ–º (–∏–ª–∏ –≤—ã—á–∏—Ç–∞–µ–º, –µ—Å–ª–∏ net_amount < 0) net_amount –∫ –±–∞–ª–∞–Ω—Å—É –∏ –ø—Ä–æ—Ñ–∏—Ç—É user_id
    """
    if not db.db_pool:
        return
    try:
        member = await bot.get_chat_member(user_id, user_id)
        uname = member.user.username or f"{member.user.first_name} {member.user.last_name}"
    except:
        uname = f"User_{user_id}"
    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT balance, profit, monthly_profit FROM users WHERE user_id=$1", user_id
        )
        if row:
            b, p, m = row["balance"], row["profit"], row["monthly_profit"]
            nb, np, nm = b + net_amount, p + net_amount, m + net_amount
            await conn.execute(
                "UPDATE users SET balance=$1, profit=$2, monthly_profit=$3, username=$4 WHERE user_id=$5",
                nb, np, nm, uname, user_id
            )
        else:
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                user_id, uname, net_amount
            )
    finally:
        await db.db_pool.release(conn)


async def apply_additional_payment(user_id: int, status_code: str, bot: Bot):
    """
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–ø–ª–∞—á–∏–≤–∞—Ç—å –æ—Å–æ–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (SPECIAL_USER_ID), –Ω–µ –ø—É—Ç–∞—Ç—å —Å apply_special_user_reward().
    –ú–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è.
    """
    if user_id != SPECIAL_USER_ID:
        return
    extra = special_payments.get(status_code, 0)
    if extra <= 0:
        return
    if not db.db_pool:
        return

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", user_id)
        if row:
            newb = row["balance"] + extra
            await conn.execute("UPDATE users SET balance=$1 WHERE user_id=$2", newb, user_id)
            await bot.send_message(
                user_id,
                f"<pre>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {extra}¬•.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {newb}¬•</pre>",
                parse_mode=ParseMode.HTML,
            )
        else:
            await conn.execute(
                "INSERT INTO users (user_id, username, balance, profit, monthly_profit) "
                "VALUES ($1,$2,$3,$3,$3)",
                user_id, "Special User", extra
            )
            await bot.send_message(
                user_id,
                f"<pre>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {extra}¬•.\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {extra}¬•</pre>",
                parse_mode=ParseMode.HTML,
            )
    finally:
        await db.db_pool.release(conn)


@router.message(StateFilter(BookPaymentStates.waiting_for_amount), F.text)
async def process_payment_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä—ã, –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∞–¥–º–∏–Ω–æ–º (—Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã).
    """
    user = message.from_user
    lang = await get_user_language(user.id)
    data = await state.get_data()
    gk, day, slot = data["group_key"], data["day"], data["time_slot"]
    code, method = data["status_code"], data["payment_method"]

    try:
        amt = int(message.text.strip())
    except ValueError:
        return await message.reply(format_html_pre(get_message(lang, "incorrect_input")),
                                   parse_mode=ParseMode.HTML)

    emoji = status_mapping.get(str(code))
    if not emoji:
        await state.clear()
        return await message.reply(get_message(lang, "invalid_data"))

    if not db.db_pool:
        await state.clear()
        return await message.reply("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.")

    conn = await db.db_pool.acquire()
    try:
        row = await conn.fetchrow(
            "SELECT user_id FROM bookings WHERE group_key=$1 AND day=$2 AND time_slot=$3",
            gk, day, slot,
        )
        if not row:
            await state.clear()
            return await message.reply(get_message(lang, "no_such_booking"))
        booked = row["user_id"]

        await conn.execute(
            "UPDATE bookings SET payment_method=$1, amount=$2 "
            "WHERE group_key=$3 AND day=$4 AND time_slot=$5 AND user_id=$6",
            method, amt, gk, day, slot, booked,
        )

        base = salary_options[groups_data[gk]["salary_option"]].get(emoji, 0)
        deduct_map = {"0": 1500, "1": 2100, "2": 3000, "3": 4500}
        deduct = deduct_map.get(str(code), 0)

        groups_data[gk]["salary"] += base
        await conn.execute("UPDATE group_financial_data SET salary=$1 WHERE group_key=$2",
                           groups_data[gk]["salary"], gk)

        if method == "cash":
            groups_data[gk]["cash"] += amt
            await conn.execute("UPDATE group_financial_data SET cash=$1 WHERE group_key=$2",
                               groups_data[gk]["cash"], gk)

        net = amt - deduct
        await update_user_financial_info(booked, net, message.bot)
        await apply_additional_payment(booked, str(code), message.bot)

        # –ï—Å–ª–∏ –µ—Å—Ç—å distribution_variant, –Ω–∞—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        var = groups_data[gk].get("distribution_variant")
        dist_data = distribution_variants.get(var, distribution_variants["variant_400"])
        dist_amt = dist_data.get(str(code), 0)
        tgt = groups_data[gk].get("target_id")
        if dist_amt > 0 and tgt:
            await update_user_financial_info(tgt, dist_amt, message.bot)
    finally:
        await db.db_pool.release(conn)

    try:
        await update_group_message(message.bot, gk)
    except TelegramBadRequest:
        pass

    await send_financial_report(message.bot)
    await state.clear()
    await message.answer(f"–£—á–ª–∏ –æ–ø–ª–∞—Ç—É {amt} (–º–µ—Ç–æ–¥={method}), —Å—Ç–∞—Ç—É—Å={emoji}.")


async def update_group_message(bot: Bot, group_key: str):
    """
    –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ (chat_id, message_id),
    –ø–æ–∫–∞–∑—ã–≤–∞—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–ª–æ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Ö, —á—Ç–æ –µ—â—ë –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'booked'.
    """
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from utils.text_utils import format_html_pre

    ginfo = groups_data[group_key]
    chat_id = ginfo["chat_id"]
    user_lang = "ru"  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —è–∑—ã–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ

    # 1) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (—à–∞–ø–∫–∞, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Ç.–¥.)
    lines = [
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  üåπüåπ {group_key} üåπüåπ  ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"{get_message(user_lang,'salary')}: {ginfo.get('salary',0)}¬•",
        f"{get_message(user_lang,'cash')}:   {ginfo.get('cash',0)}¬•",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"‚è∞ {get_message(user_lang,'booking_report')} ‚è∞",
    ]

    # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —ç–º–æ–¥–∑–∏ —é–∑–µ—Ä–æ–≤
    async def get_user_emoji(uid: int) -> str:
        if not uid or not db.db_pool:
            return "‚ùì"
        try:
            async with db.db_pool.acquire() as con:
                row = await con.fetchrow("SELECT emoji FROM user_emojis WHERE user_id=$1", uid)
                if row and row["emoji"]:
                    return row["emoji"].split(",")[0]
        except:
            pass
        return "‚ùì"

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è –°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞
    final_statuses = {'‚ùå‚ùå‚ùå','‚úÖ','‚úÖ2','‚úÖ‚úÖ','‚úÖ‚úÖ‚úÖ'}
    for day in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
        lines.append(f"\n{day}:")
        for slot in generate_time_slots():
            st = ginfo["time_slot_statuses"].get((day, slot))
            if st and st in final_statuses:
                # –°–ª–æ—Ç —É–∂–µ –∏–º–µ–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å -> –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                uid = ginfo["slot_bookers"].get((day, slot))
                user_emoji = await get_user_emoji(uid)
                lines.append(f"{slot} {st} {user_emoji}")

    text = format_html_pre("\n".join(lines))

    # 3) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    old_id = ginfo.get("message_id")
    if old_id:
        try:
            await bot.delete_message(chat_id, old_id)
        except:
            pass

    # 4) –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å `booked`
    builder = InlineKeyboardBuilder()
    for day in ("–°–µ–≥–æ–¥–Ω—è","–ó–∞–≤—Ç—Ä–∞"):
        for slot in generate_time_slots():
            st = ginfo["time_slot_statuses"].get((day, slot))
            # –ï—Å–ª–∏ —Å–ª–æ—Ç `booked` (–µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å) ‚Äî –¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É
            if st == "booked":
                builder.button(
                    text=f"{day} {slot}",
                    callback_data=f"group_time|{group_key}|{day}|{slot}"
                )
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –¥–Ω—è–º–∏
        builder.button(text="‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", callback_data="ignore")

    builder.adjust(1)
    kb = builder.as_markup()

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id
    msg = await bot.send_message(
        chat_id, text=text, parse_mode=ParseMode.HTML, reply_markup=kb
    )
    ginfo["message_id"] = msg.message_id

    # 6) –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    if db.db_pool:
        conn = await db.db_pool.acquire()
        try:
            await conn.execute(
                "UPDATE group_financial_data SET message_id=$1 WHERE group_key=$2",
                msg.message_id, group_key
            )
        finally:
            await db.db_pool.release(conn)


async def send_financial_report(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ FINANCIAL_REPORT_GROUP_ID.
    –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    """
    if not db.db_pool:
        return
    total_sal = sum(g["salary"] for g in groups_data.values())
    total_cash= sum(g["cash"]   for g in groups_data.values())

    conn = await db.db_pool.acquire()
    try:
        rows = await conn.fetch("SELECT balance FROM users")
        users_total = sum(r["balance"] for r in rows) if rows else 0
    finally:
        await db.db_pool.release(conn)

    itog1 = total_cash - total_sal
    lines = ["‚ïê‚ïê‚ïê üìä –°–≤–æ–¥–Ω—ã–π —Ñ–∏–Ω. –æ—Ç—á—ë—Ç üìä ‚ïê‚ïê‚ïê\n"]
    for k, g in groups_data.items():
        lines.append(f"[{k}] –ó–ø: {g['salary']}¬• | –ù–∞–ª: {g['cash']}¬•")
        lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    lines += [
        f"\n–ò—Ç–æ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç–∞: {total_sal}¬•",
        f"–ò—Ç–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã–µ: {total_cash}¬•",
        f"–ò—Ç–æ–≥1 (cash - salary): {itog1}¬•",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    ]

    # –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    conn = await db.db_pool.acquire()
    try:
        rows = await conn.fetch("""
            SELECT u.user_id, u.username, u.balance, e.emoji
            FROM users u LEFT JOIN user_emojis e ON u.user_id=e.user_id
            ORDER BY u.user_id
        """)
        if rows:
            lines.append("‚ïê‚ïê‚ïê‚ïê‚ïê üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë• ‚ïê‚ïê‚ïê‚ïê‚ïê\n")
            for r in rows:
                uname = r["username"] or f"User {r['user_id']}"
                ub = r["balance"]
                ue = r["emoji"] or "‚ùì"
                lines.append(f"{ue} {uname}: {ub}¬•")
                lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    finally:
        await db.db_pool.release(conn)

    lines.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
    lines.append(f"–°—É–º–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_total}¬•")
    total_final = itog1 - users_total
    lines.append(f"‚îÅ‚îÅ‚îÅ‚îÅ TOTAL (–∏—Ç–æ–≥1 - –±–∞–ª–∞–Ω—Å—ã) = {total_final}¬• ‚îÅ‚îÅ‚îÅ‚îÅ")

    report = "<pre>" + "\n".join(lines) + "</pre>"
    try:
        await bot.send_message(FINANCIAL_REPORT_GROUP_ID, report, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω. –æ—Ç—á—ë—Ç–∞: {e}")


@router.callback_query(F.data == "view_all_bookings", StateFilter("*"))
async def cmd_all(cb: CallbackQuery, state: FSMContext):
    """
    –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π (–µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ).
    """
    lang = await get_user_language(cb.from_user.id)
    from utils.text_utils import format_html_pre

    group_times = {}
    for gk, g in groups_data.items():
        for d in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
            t = g["booked_slots"].get(d, [])
            if t:
                group_times.setdefault(gk, {})[d] = t

    if not group_times:
        text = get_message(lang, "no_active_bookings")
        try:
            await cb.message.edit_text(text)
        except TelegramBadRequest:
            await safe_delete_and_answer(cb.message, text)
        return await cb.answer()

    lines = []
    for day in ("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"):
        disp = get_message(lang, "today") if day == "–°–µ–≥–æ–¥–Ω—è" else get_message(lang, "tomorrow")
        lines.append(f"üìÖ {get_message(lang,'all_bookings_title',day=disp)}")
        if not any(day in v for v in group_times.values()):
            lines.append(get_message(lang, "no_bookings"))
            lines.append("")
            continue

        lines += [
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
            "‚ïë –ì—Ä—É–ø–ø–∞   ‚ïë –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚ïë",
            "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£",
        ]
        for gk, td in group_times.items():
            ts = td.get(day, [])
            if not ts:
                continue
            lines.append(f"‚ïë {gk:<9}‚ïë {ts[0]:<18}‚ïë")
            for s in ts[1:]:
                lines.append(f"‚ïë {'':<9}‚ïë {s:<18}‚ïë")
            lines.append("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")

        if lines[-1].startswith("‚ï†"):
            lines[-1] = "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        else:
            lines.append("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
        lines.append("")

    text = format_html_pre("\n".join(lines))
    try:
        await cb.message.edit_text(text, parse_mode=ParseMode.HTML)
    except TelegramBadRequest:
        await safe_delete_and_answer(cb.message, text)
    await cb.answer()

async def safe_delete_and_answer(msg: Message, text: str):
    try:
        await msg.delete()
    except:
        pass
    await msg.answer(text, parse_mode=ParseMode.HTML)
