# handlers/booking/user_flow.py

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from constants.booking_const import (
    groups_data,
    GROUP_CHOICE_IMG,
    DAY_CHOICE_IMG,
    TIME_CHOICE_IMG,
    FINAL_BOOKED_IMG,
)
from handlers.language import get_user_language, get_message
from handlers.booking.reporting import send_booking_report, update_group_message
from handlers.booking.data_manager import BookingDataManager
from db_access.booking_repo import BookingRepo
from utils.time_utils import (
    generate_daily_time_slots as generate_time_slots,
    get_adjacent_time_slots,
    get_slot_datetime_shanghai,
)
from handlers.booking.data_manager import async_book_slot
from app_states import BookUserStates
from utils.bot_utils import safe_answer
import db

router = Router()
data_mgr = BookingDataManager(groups_data)
repo = BookingRepo(db.db_pool)


@router.message(Command("book"))
async def cmd_book(message: Message, state: FSMContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: /book
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã.
    """
    await state.clear()
    keys = data_mgr.list_group_keys()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=k, callback_data=f"bkgrp_{k}") for k in keys[i : i + 3]]
            for i in range(0, len(keys), 3)
        ]
        + [[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkmain_back")]]
    )
    await safe_answer(message, photo=GROUP_CHOICE_IMG, reply_markup=kb)
    await state.set_state(BookUserStates.waiting_for_group)


@router.callback_query(StateFilter(BookUserStates.waiting_for_group), F.data.startswith("bkgrp_"))
async def user_select_group(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É.
    """
    gk = cb.data.removeprefix("bkgrp_")
    if gk not in groups_data:
        return await safe_answer(cb, "–ù–µ—Ç —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
    await state.update_data(selected_group=gk)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="bkday_–°–µ–≥–æ–¥–Ω—è"),
                InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="bkday_–ó–∞–≤—Ç—Ä–∞"),
            ],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkgroup_back")],
        ]
    )
    await safe_answer(cb, photo=DAY_CHOICE_IMG, reply_markup=kb)
    await cb.answer()
    await state.set_state(BookUserStates.waiting_for_day)


@router.callback_query(StateFilter(BookUserStates.waiting_for_day), F.data.startswith("bkday_"))
async def user_select_day(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å.
    """
    day = cb.data.removeprefix("bkday_")
    await state.update_data(selected_day=day)
    await send_time_slots(cb, day, state)


@router.callback_query(StateFilter(BookUserStates.waiting_for_day), F.data == "bkgroup_back")
async def back_to_group_choice(cb: CallbackQuery, state: FSMContext):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã (–∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –¥–Ω—è).
    """
    keys = data_mgr.list_group_keys()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=k, callback_data=f"bkgrp_{k}") for k in keys[i : i + 3]]
            for i in range(0, len(keys), 3)
        ]
        + [[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkmain_back")]]
    )
    await safe_answer(cb, photo=GROUP_CHOICE_IMG, reply_markup=kb)
    await cb.answer()
    await state.set_state(BookUserStates.waiting_for_group)


@router.callback_query(StateFilter(BookUserStates.waiting_for_group), F.data == "bkmain_back")
async def back_to_main_menu(cb: CallbackQuery, state: FSMContext):
    """
    –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç.
    """
    await cb.answer()
    await state.clear()


async def send_time_slots(
    callback_query: CallbackQuery,
    selected_day: str,
    state: FSMContext,
):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–°–µ–≥–æ–¥–Ω—è/–ó–∞–≤—Ç—Ä–∞).
    –£—á—ë—Ç –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ –∏—Ö —Å–æ—Å–µ–¥–µ–π ¬±30 –º–∏–Ω—É—Ç.
    """
    data = await state.get_data()
    gk = data["selected_group"]
    ginfo = groups_data[gk]

    # 1. –†–µ–∞–ª—å–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    busy: set[str] = set(ginfo["booked_slots"].get(selected_day, []))

    # 2. –°–æ—Å–µ–¥–Ω–∏–µ ¬±30 –º–∏–Ω—É—Ç
    for booked_slot in list(busy):
        for adj in get_adjacent_time_slots(booked_slot):
            busy.add(adj)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤ busy
    buttons = []
    row = []
    for slot in generate_time_slots():
        if slot not in busy:
            row.append(InlineKeyboardButton(text=slot, callback_data=f"bkslot_{slot.replace(':','_')}"))
            if len(row) == 4:
                buttons.append(row)
                row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkday_back")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    lang = await get_user_language(callback_query.from_user.id)
    day_label = get_message(lang, "today") if selected_day == "–°–µ–≥–æ–¥–Ω—è" else get_message(lang, "tomorrow")
    text = f"üïí <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {day_label}</b>"

    await safe_answer(
        callback_query,
        photo=TIME_CHOICE_IMG,
        caption=text,
        reply_markup=kb,
        parse_mode="HTML",
    )
    await callback_query.answer()
    await state.set_state(BookUserStates.waiting_for_time)

@router.callback_query(StateFilter(BookUserStates.waiting_for_time), F.data.startswith("bkslot_"))
async def user_select_time(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –∏ –ë–î, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    slot = cb.data.removeprefix("bkslot_").replace("_", ":")
    data = await state.get_data()
    gk, day, uid = data["selected_group"], data["selected_day"], cb.from_user.id

    # 1+2) –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —ç–º–æ–¥–∑–∏
    await async_book_slot(gk, day, slot, uid)

    # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç –æ –±—Ä–æ–Ω–∏
    await send_booking_report(cb.bot, uid, gk, slot, day)

    # 4) –°–±—Ä–æ—Å FSM –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.clear()
    lang = await get_user_language(uid)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = None
    if getattr(cb.from_user, "full_name", None):
        username = cb.from_user.full_name
    elif getattr(cb.from_user, "username", None):
        username = cb.from_user.username
    else:
        username = f"User_{uid}"

    txt = f"üéâ <b>{username}, –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–ª–æ—Ç –Ω–∞ {slot} ({day}) –≤ –≥—Ä—É–ø–ø–µ {gk}</b>"
    await safe_answer(cb, photo=FINAL_BOOKED_IMG, caption=txt, parse_mode="HTML")

    await cb.answer()
    await update_group_message(cb.bot, gk)

@router.callback_query(StateFilter(BookUserStates.waiting_for_time), F.data == "bkday_back")
async def back_to_day_choice(cb: CallbackQuery, state: FSMContext):
    """
    –®–∞–≥ 3.1: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è, –æ–Ω –Ω–∞–∂–∞–ª ¬´–ù–∞–∑–∞–¥¬ª ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±–æ—Ä –¥–Ω—è.
    """
    data = await state.get_data()
    gk = data["selected_group"]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="bkday_–°–µ–≥–æ–¥–Ω—è"),
                InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="bkday_–ó–∞–≤—Ç—Ä–∞"),
            ],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="bkgroup_back")],
        ]
    )
    await safe_answer(cb, photo=DAY_CHOICE_IMG, reply_markup=kb)
    await cb.answer()
    await state.set_state(BookUserStates.waiting_for_day)
