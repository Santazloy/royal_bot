from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.command import Command

import db
from config import is_user_admin
from handlers.language import get_user_language, get_message

class UsersManagementStates(StatesGroup):
    waiting_for_user_selection = State()
    waiting_for_new_user_id = State()
    waiting_for_delete_choice = State()
    waiting_for_edit_choice = State()
    waiting_for_new_name = State()
    waiting_for_new_emoji = State()
    waiting_for_balance_op = State()
    waiting_for_balance_value = State()

users_router = Router()


async def _send_users_list(send_func, admin_id: int, lang: str, state: FSMContext):
    pool = db.db_pool
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT u.user_id, u.username, u.balance, e.emojis
            FROM users u
            LEFT JOIN user_emojis e ON u.user_id = e.user_id
            ORDER BY u.user_id
            """
        )
    if rows:
        lines = []
        for r in rows:
            uid = r["user_id"]
            uname = r["username"] or f"User {uid}"
            bal = r["balance"] or 0
            emojis_str = r["emojis"] or ""
            first_emoji = (
                (emojis_str.split(",")[0].strip() if "," in emojis_str else emojis_str.strip())
                or "üë§"
            )
            lines.append(f"ID={uid}, {uname}, {first_emoji}, –ë–∞–ª–∞–Ω—Å={bal}¬•")
        text = "\n".join(lines)
    else:
        text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î."
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="users_new"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="users_delete"),
            ]
        ]
    )
    if rows:
        for r in rows:
            uid = r["user_id"]
            uname = r["username"] or f"User {uid}"
            cb_data = f"edit_user_{uid}"
            kb.inline_keyboard.append(
                [InlineKeyboardButton(text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {uid} ({uname})", callback_data=cb_data)]
            )
    await send_func(f"<pre>{text}</pre>", parse_mode="HTML", reply_markup=kb)
    await state.set_state(UsersManagementStates.waiting_for_user_selection)


@users_router.message(Command("users"))
async def cmd_users(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    lang = await get_user_language(admin_id)
    if not is_user_admin(admin_id):
        await message.answer(get_message(lang, "no_permission"))
        return
    await _send_users_list(message.answer, admin_id, lang, state)


@users_router.callback_query(F.data == "users_new")
async def cb_users_new(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ numeric ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(UsersManagementStates.waiting_for_new_user_id)


@users_router.message(F.state == UsersManagementStates.waiting_for_new_user_id)
async def process_input_new_user_id(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if not is_user_admin(admin_id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    input_str = message.text.strip()
    if not input_str.isdigit():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    new_id = int(input_str)
    pool = db.db_pool
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users(user_id, username, balance)
            VALUES ($1, NULL, 0)
            ON CONFLICT (user_id) DO NOTHING
            """,
            new_id,
        )
        await conn.execute(
            """
            INSERT INTO user_emojis (user_id, emojis)
            VALUES ($1, '')
            ON CONFLICT (user_id) DO NOTHING
            """,
            new_id,
        )
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω (–∏–º—è –∏ —ç–º–æ–¥–∑–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã).")
    await state.clear()


@users_router.callback_query(F.data == "users_delete")
async def cb_users_delete(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    pool = db.db_pool
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, username FROM users ORDER BY user_id")
    if not rows:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await state.clear()
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for r in rows:
        uid, uname = r["user_id"], r["username"] or f"User {r['user_id']}"
        kb.inline_keyboard.append(
            [InlineKeyboardButton(text=f"{uid} ({uname})", callback_data=f"delete_user_{uid}")]
        )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb)
    await state.set_state(UsersManagementStates.waiting_for_delete_choice)


@users_router.callback_query(F.data.startswith("delete_user_"), UsersManagementStates.waiting_for_delete_choice)
async def process_delete_user_choice(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    user_id_str = callback.data.split("delete_user_")[1]
    if not user_id_str.isdigit():
        await callback.message.edit_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        await state.clear()
        return
    user_id_to_delete = int(user_id_str)
    pool = db.db_pool
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM user_emojis WHERE user_id=$1", user_id_to_delete)
        await conn.execute("DELETE FROM users WHERE user_id=$1", user_id_to_delete)
    await callback.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id_to_delete} —É–¥–∞–ª—ë–Ω.")
    await state.clear()


@users_router.callback_query(F.data.startswith("edit_user_"), UsersManagementStates.waiting_for_user_selection)
async def cb_edit_user(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    user_id_str = callback.data.split("edit_user_")[1]
    if not user_id_str.isdigit():
        await callback.message.edit_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        await state.clear()
        return
    target_user_id = int(user_id_str)
    pool = db.db_pool
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            """
            SELECT u.user_id, u.username, u.balance, e.emojis
            FROM users u
            LEFT JOIN user_emojis e ON u.user_id = e.user_id
            WHERE u.user_id=$1
            """,
            target_user_id,
        )
    if not row:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    await state.update_data(edit_user_id=target_user_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò–∑–º. –∏–º—è", callback_data="edit_name"),
                InlineKeyboardButton(text="–ò–∑–º. —ç–º–æ–¥–∑–∏", callback_data="edit_emoji"),
            ],
            [InlineKeyboardButton(text="–ò–∑–º. –±–∞–ª–∞–Ω—Å", callback_data="edit_balance")],
        ]
    )
    uname = row["username"] or f"User {row['user_id']}"
    emojis_str = row["emojis"] or ""
    bal = row["balance"] or 0
    await callback.message.edit_text(
        (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={target_user_id}\n\n"
            f"–ò–º—è: {uname}\n"
            f"–≠–º–æ–¥–∑–∏: {emojis_str}\n"
            f"–ë–∞–ª–∞–Ω—Å: {bal}¬•\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
        ),
        reply_markup=kb,
    )
    await state.set_state(UsersManagementStates.waiting_for_edit_choice)


@users_router.callback_query(F.data == "edit_name", UsersManagementStates.waiting_for_edit_choice)
async def cb_edit_name(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(UsersManagementStates.waiting_for_new_name)


@users_router.message(F.state == UsersManagementStates.waiting_for_new_name)
async def process_new_name(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if not is_user_admin(admin_id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    new_name = message.text.strip()
    data = await state.get_data()
    user_id_ = data.get("edit_user_id")
    pool = db.db_pool
    async with pool.acquire() as conn:
        await conn.execute("UPDATE users SET username=$1 WHERE user_id=$2", new_name, user_id_)
    await message.answer(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}")
    await state.clear()


@users_router.callback_query(F.data == "edit_emoji", UsersManagementStates.waiting_for_edit_choice)
async def cb_edit_emoji(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(UsersManagementStates.waiting_for_new_emoji)


@users_router.message(F.state == UsersManagementStates.waiting_for_new_emoji)
async def process_new_emoji(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if not is_user_admin(admin_id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    new_emoji_str = message.text.strip()
    data = await state.get_data()
    user_id_ = data.get("edit_user_id")
    pool = db.db_pool
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO user_emojis (user_id, emojis)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO UPDATE SET emojis = EXCLUDED.emojis
            """,
            user_id_,
            new_emoji_str,
        )
    await message.answer(f"–≠–º–æ–¥–∑–∏ –¥–ª—è {user_id_} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_emoji_str}")
    await state.clear()


@users_router.callback_query(F.data == "edit_balance", UsersManagementStates.waiting_for_edit_choice)
async def cb_edit_balance(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="+", callback_data="editbal_plus"),
                InlineKeyboardButton(text="-", callback_data="editbal_minus"),
            ]
        ]
    )
    await callback.answer()
    await callback.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", reply_markup=kb)
    await state.set_state(UsersManagementStates.waiting_for_balance_op)


@users_router.callback_query(F.data.startswith("editbal_"), UsersManagementStates.waiting_for_balance_op)
async def cb_editbal_op(callback: CallbackQuery, state: FSMContext):
    if not is_user_admin(callback.from_user.id):
        await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    op_str = callback.data.split("editbal_")[1]
    await callback.answer()
    if op_str not in ("plus", "minus"):
        await callback.message.edit_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        await state.clear()
        return
    await state.update_data(balance_op=op_str)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ):")
    await state.set_state(UsersManagementStates.waiting_for_balance_value)


@users_router.message(F.state == UsersManagementStates.waiting_for_balance_value)
async def process_balance_value(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if not is_user_admin(admin_id):
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
        return
    val_str = message.text.strip()
    if not val_str.isdigit():
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    amount = int(val_str)
    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        return
    data = await state.get_data()
    user_id_ = data.get("edit_user_id")
    op = data.get("balance_op")
    delta = amount if op == "plus" else -amount
    pool = db.db_pool
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT balance FROM users WHERE user_id=$1", user_id_)
        if not row:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users.")
            await state.clear()
            return
        new_balance = row["balance"] + delta
        await conn.execute("UPDATE users SET balance=$1 WHERE user_id=$2", new_balance, user_id_)
    op_text = "+" if op == "plus" else "-"
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_} –∏–∑–º–µ–Ω—ë–Ω ({op_text}{amount}), –∏—Ç–æ–≥: {new_balance}¬•")
    await state.clear()


@users_router.callback_query(F.data == "balances")
async def show_users_via_callback(callback: CallbackQuery, state: FSMContext):
    lang = await get_user_language(callback.from_user.id)
    if not is_user_admin(callback.from_user.id):
        await callback.answer(get_message(lang, "no_permission"), show_alert=True)
        return
    await callback.answer()
    await _send_users_list(callback.message.answer, callback.from_user.id, lang, state)
