# handlers/ai.py

import os
import asyncio
import openai

from aiogram import Router
from aiogram.filters.command import Command
from aiogram.types import Message

from utils.bot_utils import safe_answer

router = Router()

@router.message(Command("ai"))
async def cmd_ai(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /ai ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π OpenAI.
    """
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        await safe_answer(message, "‚ùå OpenAI API key is not set.")
        return

    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤)
    def list_models():
        openai.api_key = api_key
        resp = openai.Model.list()
        return [m.id for m in resp.data]

    try:
        models = await asyncio.to_thread(list_models)
        if not models:
            await safe_answer(message, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        else:
            text = "\n".join(models)
            await safe_answer(message, f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ OpenAI:\n{text}")
    except Exception as e:
        await safe_answer(message, f"üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")
