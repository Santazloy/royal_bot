# handlers/ai.py

import os
import asyncio
import openai

from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from utils.bot_utils import safe_answer

router = Router()

@router.message(Command("ai"))
async def cmd_ai(message: Message):
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        await safe_answer(message, "‚ùå OpenAI API key is not set.")
        return

    def list_models():
        openai.api_key = api_key
        resp = openai.Model.list()
        return [m.id for m in resp.data]

    try:
        models = await asyncio.to_thread(list_models)
        if not models:
            await safe_answer(message, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        else:
            text = "\n".join(models)
            await safe_answer(message, f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ OpenAI:\n{text}")
    except Exception as e:
        await safe_answer(message, f"üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")

@router.callback_query(F.data == "leonard_ai_models")
async def list_models_for_menu(query: CallbackQuery):
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        await safe_answer(query, "‚ùå OpenAI API key is not set.")
        return

    def list_models():
        openai.api_key = api_key
        resp = openai.Model.list()
        return [m.id for m in resp.data]

    try:
        models = await asyncio.to_thread(list_models)
        if not models:
            await safe_answer(query, "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π.")
        else:
            text = "\n".join(models)
            await safe_answer(query, f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ OpenAI:\n{text}")
    except Exception as e:
        await safe_answer(query, f"üö® –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")
